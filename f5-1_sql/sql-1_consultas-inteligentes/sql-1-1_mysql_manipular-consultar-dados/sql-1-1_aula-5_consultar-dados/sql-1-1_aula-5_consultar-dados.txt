https://cursos.alura.com.br/course/mysql-manipule-dados-com-sql

Data Science > Cursos de SQL e Banco de Dados

Curso de
SQL com MySQL: manipule e consulte dados


Aula 5 | 48min

Consultando os dados


https://cursos.alura.com.br/course/mysql-manipule-dados-com-sql/section/8036/tasks


  5-1 Incluindo dados na tabela
  5-2 Selecionando todos os vendedores
  5-3 Filtrando registros
  5-4 Selecionando um vendedor
  5-5 Filtrando usando maior, menor e diferente
  5-6 Selecionando vendedor pelo valor da comissão
  5-7 Filtrando datas
  5-8 Selecionando vendedor pela data
  5-9 Filtros compostos
  5-10 Seleção composta
  5-11 Consolidando o seu conhecimento
  5-12 O que aprendemos?
  5-13 Conclusão


5-1 Incluindo dados na tabela

Transcrição

Você pode fazer o download completo do código realizado neste vídeo e continuar seus estudos.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/05/5.1SQL.zip


Nessa aula vamos aprender a realizar consultas nas bases. Já vimos como incluir, alterar e apagar registros e agora, como consultá-los. Para isso, iremos inserir um volume maior de dados na tabela e esses dados estão no link associado a esse vídeo.

Baixe o arquivo SQL_10.sql e no Workbench vá em "File > Open SQL script", escolha o arquivo dessa aula, irá carregar o script completo na área do código.

Analisando os comandos, o USE sucos; nos conecta a base sucos; DROP TABLE tbcliente;, apaga a tabela de clientes e o mesmo caso para a de protudo; CREATE TABLE tbcliente () para criar a tabela de cliente; ALTER TABLE tbcliente ADD PRIMARY KEY (CPF);, que adiciona uma chave primária, em seguida, com o CREATE TABLE tbproduto; cria a tabela de produto e adiciona uma chave primária com ALTER TABLE tbproduto ADD PRIMARY KEY (PRODUTO);. Logo após, há vários INSERT INTO seguidos para incluir uma quantidade grande de registros na tabela de cliente e de produto.

Rodando o código e, logo após, clicando com o botão direito do mouse selecionando a opção "Refresh All", as tabelas de cliente e produto estarão em "SUCOS > TABLES". Vamos criar um script novamente para fazermos alguns testes referentes a visualização da tabela de cliente, poderia ser a de produto também. Rodando a tabela de cliente com SELECT * FROM tbcliente;, temos:

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	80012212	1990-09-01	27	F	170000	245000	0
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1

Podemos usar, ao invés do asterisco (*), o nome dos campos, como em SELECT CPF, ENDERECO1, ENDERECO2, BAIRRO, CIDADE, ESTADO, CEP, DATA_NASCIMENTO, IDADE, SEXO, LIMITE_CREDITO, VOLUME_COMPRA, PRIMEIRA_COMPRA FROM tbcliente;. Rodando ambos dos comandos select, será aberta duas abas com o mesmo resultado em "Result Grid". A primeira é a "tbcliente2" que é o primeiro select e a "tbcliente3" que é esse segundo que inserimos os campos ao invés do asterisco.

SELECT * FROM tbcliente;

SELECT CPF, ENDERECO1, ENDERECO2, BAIRRO, CIDADE, ESTADO, CEP, DATA_NASCIMENTO, IDADE, SEXO, LIMITE_CREDITO, VOLUME_COMPRA, PRIMEIRA_COMPRA FROM tbcliente;

Usamos o asterisco para facilitar e agilizar nosso comando se quisermos buscar todos os campos. Agora, caso a intenção seja filtrar a visualização, como, SELECT CPF, NOME FROM tbcliente;, nesse caso estamos selecionando somente o campo "CPF" e "NOME", temos como resultado no Workbench:

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME
1471156710	Érica Carvalho
19290992743	Fernando Cavalcante
2600586709	César Teixeira
3623344710	Marcos Nogueira
492472718	Eduardo Jorge
50534475787	Abel Silva
5576228758	Petra Oliveira

Nos comandos anteriores os resultados exibem todos os registros da tabela, agora, se quisermos visualizar apenas os 5 primeiros registros, precisamos especificar no final do comando SELECT CPF, NOME FROM tbcliente LIMIT 5;. Como consequência, temos:
CPF	NOME
1471156710	Érica Carvalho
19290992743	Fernando Cavalcante
2600586709	César Teixeira
3623344710	Marcos Nogueira
492472718	Eduardo Jorge

Conseguimos também nomear os campos no momento da consulta aplicando o ALIASES , por exemplo, SELECT CPF AS CPF_CLIENTE, NOME AS NOME_CLIENTE FROM tbcliente;, rodando esse comando, temos a tabela com os seguintes nomes na coluna:
CPF_CLIENTE	NOME_CLIENTE
1471156710	Érica Carvalho
19290992743	Fernando Cavalcante
2600586709	César Teixeira
3623344710	Marcos Nogueira
492472718	Eduardo Jorge
50534475787	Abel Silva
5576228758	Petra Oliveira

    Um alias (ALIASES) só existe durante a consulta e serve para substituir nomes de colunas ou tabelas temporariamente.

Essa consulta pode ser realizada não necessariamente na ordem dos campos que estão na tabela, como, SELECT NOME, CPF, SEXO, IDADE, DATA_NASCIMENTO FROM tbcliente;, note que as colunas estão em disposições diferentes no comando e na tabela no Workbench. Porém, isso não interfere no resultado, visto que o retorno das colunas será na ordem que especifiquei no SELECT.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

NOME	CPF	SEXO	IDADE	DATA_NASCIMENTO
Érica Carvalho	1471156710	F	27	1990-09-01
Fernando Cavalcante	19290992743	M	18	2000-02-12

Nessa aula tivemos o primeiro contato com o comando de seleção de dados na tabela. Aprendemos a selecionar as colunas, informar quais campos queremos visualizar, limitar sua saída e alterar temporariamente o seu nome usando o comando alias.




5-2 Selecionando todos os vendedores

Selecione nome e matrícula dos vendedores.

Opinião do instrutor

SELECT NOME, MATRICULA FROM TABELA_DE_VENDEDORES;



5-3 Filtrando registros

Transcrição

Você pode fazer o download completo do código realizado neste vídeo e continuar seus estudos.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/05/SQL_12.sql


Nessa aula vamos aprender a filtrar registros para casos em que não queremos visualizar todas as informações, visto que referente a filtros o máximo que sabemos usar até o momento é o comando LIMIT, que limita o número de linhas exibidas.

Vamos inserir SELECT * FROM tbproduto; e SELECT * FROM tbcliente; para verificar as informações das tabelas de produto e cliente. Assim como usamos a cláusula WHERE para filtrar um produto específico no comando UPDATE, podemos usar no SELECT: SELECT * FROM tbproduto WHERE PRODUTO = ‘544931’;

Tabela:
PRODUTO	NOME	EMBALAGEM	TAMANHO	SABOR	PRECO_LISTA
544931	Frescor do Verão - 350 ml - Limão	Lata	350 ml	Limão	2.4595

O retorno dessa consulta terá apenas um registro, o produto com o código 544931.

Nessa condição não é preciso selecionar somente um campo que seja chave primária, pode usar, por exemplo: SELECT * FROM tbcliente WHERE CIDADE = ‘Rio de Janeiro’;. Estamos colocando a coluna "CIDADE" na condição, que não é chave primária.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
19290992743	Fernando Cavalcante	R. Dois de fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	10000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de Janeiro	RJ	22020001	2000-03-12	18	M	120000	220000	0
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1

O retorno dessa consulta será somente clientes em que a cidade é Rio de Janeiro.

A cláusula WHERE pode ter uma condição que retorne mais de um registro, que também vale para outros comandos, como, SELECT, UPDATE e DELETE. Exemplificando, usando o comando SELECT * FROM tbproduto WHERE SABOR = ‘Limão’; o resultado são todos os produtos com o sabor limão, com 4 registros:
PRODUTO	NOME	EMBALAGEM	TAMANHO	SABOR	PRECO_LISTA
1042712	Linha Citros - 700 ml - Limão	Garrafa	700 ml	Limão	4.904
1051518	Frescor do Verão - 470 ml - Limão	Garrafa	470 ml	Limão	3.2995
1088126	Linha Citros - 1 Litro - Limão	PET	1 Litro	Limão	7.004
544931	Frescor do Verão - 350 ml - Limão	Lata	350 ml	Limão	2.4595

Contudo, vamos supor que esse sabor limão será, a partir de agora, chamado "cítricos", para essa alteração podemos usar o comando UPDATE: UPDATE tbproduto SET SABOR = ‘Cítricos’ WHERE SABOR = ‘Limão’, selecionando apenas esse comando e rodando, é retornado a mensagem comunicando que 4 linhas foram afetadas e 4 linhas alteradas.

Se caso rodarmos novamente o comando SELECT * FROM tbproduto WHERE SABOR = ‘Limão’; não teremos nenhum registro como resultado, visto que alteramos o sabor limão para cítricos. Por esse motivo, ao invés de 'limão' vamos inserir o sabor 'cítricos' nesse comando SELECT.

Comando SELECT:

SELECT * FROM tbproduto WHERE SABOR = ‘Cítricos’;

Executando esse comando, temos como resultado a coluna "SABOR" alterada de 'limão' para 'cítricos':
PRODUTO	NOME	EMBALAGEM	TAMANHO	SABOR	PRECO_LISTA
1042712	Linha Citros - 700 ml - Limão	Garrafa	700 ml	Cítricos	4.904
1051518	Frescor do Verão - 470 ml - Limão	Garrafa	470 ml	Cítricos	3.2995
1088126	Linha Citros - 1 Litro - Limão	PET	1 Litro	Cítricos	7.004
544931	Frescor do Verão - 350 ml - Limão	Lata	350 ml	Cítricos	2.4595

Código completo dessa aula:

SELECT * FROM tbproduto WHERE PRODUTO = '544931';

SELECT * FROM tbcliente WHERE CIDADE = 'Rio de Janeiro';

SELECT * FROM tbproduto WHERE SABOR = 'Cítricos';

UPDATE tbproduto SET SABOR = 'Cítricos' WHERE SABOR = 'Limão';

Resumindo, podemos ter na cláusula WHERE uma condição que vai me retornar mais de um registro e, não necessariamente, precisa ser chave primária, é permitido todos os campos que constam na tabela.

É possível também executar filtros compostos, mas não veremos isso nesse vídeo, o objetivo dessa aula foi realizar filtros simples para selecionar elementos na tabela que tragam somente alguns registros.




5-4 Selecionando um vendedor

Verifique os dados cadastrais da vendedora Claudia Morais.

Opinião do instrutor

SELECT * FROM TABELA_DE_VENDEDORES WHERE NOME = 'Claudia Morais';




5-5 Filtrando usando maior, menor e diferente

Transcrição

Você pode fazer o download completo do código realizado neste vídeo e continuar seus estudos.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/05/SQL_13.sql


Nessa aula vamos aprender a elaborar melhor os filtros, para buscar registros maiores ou menores sobre algum dado.

Vamos criar mais um script e inserir o comando SELECT * FROM tbcliente WHERE IDADE = 22;, que teremos como resultado dessa consulta 4 registros somente de clientes com 22 anos:
CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0
5576228758	Petra Oliveira	R. Benício de Abreu		Lapa	São Paulo	SP	88192029	1995-11-14	22	F	70000	160000	1
8502682733	Valdecir da Silva	R. Srg. Édison de Oliveira		Jardins	São Paulo	SP	82122020	1995-10-07	22	M	110000	190000	0
9283760794	Edson Meilelles	R. Pinto de Azevedo		Cidade Nova	Rio de Janeiro	RJ	22002002	1995-10-07	22	M	150000	250000	1

Podemos também selecionar clientes que tem mais de 22 anos, substituindo o igual (=)" por maior (>) no comando: SELECT * FROM tbcliente WHERE IDADE > 22;:

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	80012212	1990-09-01	27	F	170000	245000	0
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
492472718	Eduardo Jorge	R. Volta Grande		Tijuca	Rio de Janeiro	RJ	22012002	1994-07-19	23	M	75000	95000	1
5648641702	Paulo César Mattos	Rua Hélio Beltrão		Tijuca	Rio de Janeiro	RJ	21002020	1991-08-30	26	M	120000	220000	0

Para selecionar clientes com menos de 22 anos, basta substituir o maior (>) por menor (<) no comando: SELECT * FROM tbCliente WHERE IDADE < 22;:
CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de Janeiro	RJ	22020001	2000-03-12	18	M	120000	220000	0
95939180787	Fábio Carvalho	R. dos Jacarandás da Península		Barra da Tijuca	Rio de Janeiro	RJ	22002020	1992-01-05	16	M	90000	180000	1

O retorno dessa consulta será 3 registros com os clientes com menos de 22 anos.

Vamos consultar agora clientes que têm menos de 22 anos, incluindo os que têm. Basta substituir o menor (<) por menor ou igual (<=) no comando: SELECT * FROM tbcliente WHERE IDADE <= 22;, o igual inclui os que têm 22 anos no critério do filtro.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de Janeiro	RJ	22020001	2000-03-12	18	M	120000	220000	0
95939180787	Fábio Carvalho	R. dos Jacarandás da Península		Barra da Tijuca	Rio de Janeiro	RJ	22002020	1992-01-05	16	M	90000	180000	1
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0

Supondo que agora precisamos consultar todos os clientes, exceto os que têm 22 anos. Basta substituir pelo símbolo de diferença no comando (<>): SELECT * FROM tbcliente WHERE IDADE <> 22;.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	80012212	1990-09-01	27	F	170000	245000	0
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de Janeiro	RJ	22020001	2000-03-12	18	M	120000	220000	0

Podemos aplicar esses símbolos de menor, maior, menor ou igual, ou maior ou igual em textos também. No MySQL existe uma ordem alfabética para as letras, então, o "B" é maior que o "A" (B > A), o "C" é maior que o "B" (C > B), o "X" é maior que "R" e assim sucessivamente.

Por isso, quando realizamos a consulta SELECT * FROM tbcliente WHERE NOME > ‘Fernando Cavalcante’;, o MySQL analisa a primeira letra, no caso "F", a partir desse critério e se tiver outro nome que inicie com "F", como "Fátima" seria um candidato, já ao comparar a segunda letra de cada nome, perceberia que "E" é maior que "A", descartando "Fátima" da condição.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
5576228758	Petra Oliveira	R. Benício de Abreu		Lapa	São Paulo	SP	88192029	1995-11-14	22	F	70000	160000	1
5648641702	Paulo César Mattos	Rua Hélio Beltrão		Tijuca	Rio de Janeiro	RJ	21002020	1991-08-30	26	M	120000	220000	0

O resultado dessa consulta são clientes com nomes "acima" da letra "F", como M*arcos, *Petra e Paulo.

Se quisermos incluir o Fernando na consulta, teríamos que colocar o símbolo maior ou igual (>=) no comando: SELECT * FROM tbcliente WHERE NOME >= ‘Fernando Cavalcante’;:

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
5576228758	Petra Oliveira	R. Benício de Abreu		Lapa	São Paulo	SP	88192029	1995-11-14	22	F	70000	160000	1
5648641702	Paulo César Mattos	Rua Hélio Beltrão		Tijuca	Rio de Janeiro	RJ	21002020	1991-08-30	26	M	120000	220000	0

Para excluir o nome "Fernando" do filtro, usamos o símbolo de diferente (<>): SELECT * FROM tbcliente WHERE NOME <> ‘Fernando Cavalcante’;:

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	8001221	1990-09-01	27	F	170000	245000	0
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de Janeiro	RJ	22020001	2000-03-12	18	M	120000	220000	0
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
5576228758	Petra Oliveira	R. Benício de Abreu		Lapa	São Paulo	SP	88192029	1995-11-14	22	F	70000	160000	1
5648641702	Paulo César Mattos	Rua Hélio Beltrão		Tijuca	Rio de Janeiro	RJ	21002020	1991-08-30	26	M	120000	220000	0

Tem um detalhe que vamos ver agora que pode gerar algumas dúvidas. Ao executar o comando SELECT * FROM tbproduto WHERE PRECO_LISTA = 16.008 o resultado é vazio, isso acontece pelo fato do campo "PRECO_LISTA" ser do tipo FLOAT, um ponto flutuante e, em razão disso, não é possível encontrar exatamente o resultado inserido na condição.
PRODUTO	NOME	EMBALAGEM	TAMANHO	SABOR	PRECO_LISTA
NULL	NULL	NULL	NULL	NULL	NULL

O recomendado para trabalhar com condições de igual (=), menor ou igual (<=) ou, maior ou igual (>=) e diferente (<>) seria o tipo DECIMAL, visto que o MySQL consegue encontrar o número exato na busca.

Para números do tipo FLOAT, é possível usar apenas os símbolos de maior e menor, podemos usar o diferente (<>), porém o produto com o preço 16.008 também irá constar justamente pelo fato do MySQL não encontrar o valor exato.

Temos o comando BETWEEN, que é mais elaborado que o WHERE. Com ele conseguimos buscar exatamente o valor especificado na condição usando o comando: SELECT * FROM tbproduto WHERE PRECO_LISTA BETWEEN 16.007 AND 16.009;, que lista todos os produtos em que o preço está entre 16.007 e 16.009.
PRODUTO	NOME	EMBALAGEM	TAMANHO	SABOR	PRECO_LISTA
1037797	Clean - 2 Litros - Laranja	PET	2 Litros	Laranja	16.008

Essa é uma característica do MySQL, por ser do tipo FLOAT não é possível buscar o valor exato. Porém, podemos usar os limites inferiores e superiores próximos para conseguir encontrar o valor que queremos.

Código com todos os comandos dessa aula:

SELECT * FROM tbcliente;

SELECT * FROM tbcliente WHERE IDADE = 22;

SELECT * FROM tbcliente WHERE IDADE > 22;

SELECT * FROM tbcliente WHERE IDADE < 22;

SELECT * FROM tbcliente WHERE IDADE <= 22;

SELECT * FROM tbcliente WHERE IDADE <> 22;

SELECT * FROM tbcliente WHERE NOME >= 'Fernando Cavalcante';

SELECT * FROM tbcliente WHERE NOME <> 'Fernando Cavalcante';

SELECT * FROM tbproduto;

SELECT * FROM tbproduto WHERE PRECO_LISTA > 16.008;

SELECT * FROM tbproduto WHERE PRECO_LISTA < 16.008;

SELECT * FROM tbproduto WHERE PRECO_LISTA <> 16.008;

SELECT * FROM tbproduto WHERE PRECO_LISTA BETWEEN 16.007 AND 16.009;




5-6 Selecionando vendedor pelo valor da comissão

Veja quais são os vendedores que possuem comissão maior que 10%.

Opinião do instrutor

SELECT * FROM TABELA_DE_VENDEDORES WHERE PERCENTUAL_COMISSAO > 0.10;




5-7 Filtrando datas

Transcrição

Você pode fazer o download completo do código realizado neste vídeo e continuar seus estudos.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/05/SQL_14.sql


Nessa aula vamos analisar o comportamento do MySQL quando queremos filtrar campos que são datas.

Abrindo um script no Workbench e selecionando a tabela de clientes com SELECT * FROM tbcliente;, temos a coluna "DATA_NASCIMENTO", sendo a que vamos usar para realizar os testes de filtro.

Podemos especificar uma data, para saber quem nasceu nesse dia usando o comando SELECT e uma condição com o símbolo de igual (=):SELECT * FROM tbcliente WHERE DATA_NASCIMENTO = ‘1995-01-13’;.
CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1

O resultado dessa consulta é somente os clientes que nasceram no dia 13-01-1995, que no caso é o Marcos Nogueira.

Com datas também é possível usar o símbolo maior (>) e o menor (<), sendo quem nasceu depois e antes do dia indicado, respectivamente.

Resultado do SELECT * FROM tbcliente WHERE DATA_NASCIMENTO > ‘1995-01-13’;:

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de Janeiro	RJ	22020001	2000-03-12	18	M	120000	220000	0
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0

Resultado do SELECT * FROM tbcliente WHERE DATA_NASCIMENTO <= ‘1995-01-13’;, perceba que nesse comando há o sinal de menor ou igual, isto é, a data indicada está incluída no filtro e será exibida no resultado da consulta.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	80012212	1990-09-01	27	F	170000	245000	0
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
492472718	Eduardo Jorge	R. Volta Grande		Tijuca	Rio de Janeiro	RJ	22012002	1994-07-19	23	M	75000	95000	1

As datas se comportam de forma semelhante aos números na aplicação de filtros, contudo é utilizado o calendário ocidental para ordenar as datas. Pode também manusear partes das datas, como apenas o ano ou o mês, visto que há funções de data que nos auxiliam nisso. Por exemplo: SELECT * FROM tbcliente WHERE YEAR(DATA_NASCIMENTO) = 1995;, sendo YEAR() uma função que filtra o ano de uma data especificada no parêntese, o resultado dessa função é um número inteiro e, em razão disso, o ano 1995 não está entre aspas simples ('').

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0
5576228758	Petra Oliveira	R. Benício de Abreu		Lapa	São Paulo	SP	88192029	1995-11-14	22	F	70000	160000	1

Em situações que queremos filtrar apenas o mês, como em alguma campanha de marketing em que será enviado um cartão de celebração para quem faz aniversário em um determinado mês de outubro (10), por exemplo: SELECT * FROM tbcliente WHERE MONTH(DATA_NASCIMENTO) = 10;:
CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
8502682733	Valdecir da Silva	R. Srg. Édison de Oliveira		Jardins	São Paulo	SP	82122020	1995-10-07	22	M	110000	190000	0
9283760794	Edson Meilelles	R. Pinto de Azevedo		Cidade Nova	Rio de Janeiro	RJ	22002002	1995-10-07	22	M	150000	250000	1

O resultado dessa consulta são 2 registros com os clientes que fazem aniversário no mês de outubro.

Código com todos os comandos usados nessa aula:

SELECT * FROM tbcliente;

SELECT * FROM tbcliente WHERE DATA_NASCIMENTO = '1995-01-13';

SELECT * FROM tbcliente WHERE DATA_NASCIMENTO > '1995-01-13';

SELECT * FROM tbcliente WHERE DATA_NASCIMENTO <= '1995-01-13';

SELECT * FROM tbcliente WHERE YEAR(DATA_NASCIMENTO) = 1995;

SELECT * FROM tbcliente WHERE MONTH(DATA_NASCIMENTO) = 10;

Resumindo, podemos usar a função YEAR e MONTH para inserir anos e meses no filtro e as datas se comportam como números para essas condições. O MySQL considera o calendário interno, sabendo, por exemplo, que o 1-01-1995 vem antes de 31-12-1998, isto é, ele já possui esse controle interno das datas.





5-8 Selecionando vendedor pela data

Veja quais são os vendedores que foram admitidos da empresa a partir de 2016.

Opinião do instrutor

SELECT * FROM TABELA_DE_VENDEDORES WHERE YEAR(DATA_ADMISSAO) >= 2016;




5-9 Filtros compostos

Transcrição

Você pode fazer o download completo do código realizado neste vídeo e continuar seus estudos.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/05/SQL_15.sql


Até o momento vimos sobre filtros simples, quando queremos analisar os registros iguais, maior ou menor a algum dado indicado. Nessa aula vamos aprender a realizar filtros compostos, quando queremos juntar duas condições em uma só.

Criando um script e selecionando a tabela de produtos com o comando SELECT * FROM tbproduto;, observe a coluna "PRECO_LISTA", que aplicamos a condição BETWEEN em aulas passadas.

Quando usamos o comando BETWEEN (entre) já estávamos aprendendo mais ou menos sobre como funciona o filtro composto, visto que quando inserimos essa cláusula estamos impondo a seguinte condição: me retorne todos os registros que são maiores ou iguais ao valor indicado primeiro e menores ou iguais a outro valor especificado.

No caso anterior, usamos SELECT * FROM tbproduto WHERE PRECO_LISTA BETWEEN 16.007 AND 16.009;, esse comando significa que será executado primeiro a condição SELECT * FROM tbproduto WHERE PRECO_LISTA >= 16.007; e sobre o resultado desse comando, aplicar a segunda condição SELECT * FROM tbproduto WHERE PRECO_LISTA <= 16.009;. Esta última, quando a executamos é aplicada sobre tudo, de forma separada.

Código:

SELECT * FROM tbproduto;

SELECT * FROM tbproduto WHERE PRECO_LISTA BETWEEN 16.007 AND 16.009;
SELECT * FROM tbproduto WHERE PRECO_LISTA >= 16.007;
SELECT * FROM tbproduto WHERE PRECO_LISTA <= 16.009;

Para juntar as condições vamos usar o filtro AND ("E"): SELECT * FROM tbproduto WHERE PRECO_LISTA >= 16.007 AND PRECO_LISTA <= 16.009;, com esse comando ambas condições serão realizadas simultaneamente, no mesmo WHERE. Rodando essa linha de código teremos o mesmo resultado de quando aplicamos o BETWEEN:
PRODUTO	NOME	EMBALAGEM	TAMANHO	SABOR	PRECO_LISTA
1037797	Clean - 2 Litros - Laranja	PET	2 Litros	Laranja	16.008

Podemos usar essa condição em diversas situações, como, por exemplo, se quisermos buscar somente clientes que tenham entre 18 e 22 anos. Vamos selecionar a tabela de cliente e inserir a condição: SELECT * FROM tbcliente WHERE IDADE >= 18 AND IDADE <= 22;:
CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de JaneirO	RJ	22020001	2000-03-12	18	M	120000	220000	0
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0
5576228758	Petra Oliveira	R. Benício de Abreu		Lapa	São Paulo	SP	88192029	1995-11-14	22	F	70000	160000	1
8502682733	Valdecir da Silva	R. Srg. Édison de Oliveira		Jardins	São Paulo	SP	82122020	1995-10-07	22	M	110000	190000	0
9283760794	Edson Meilelles	R. Pinto de Azevedo		Cidade Nova	Rio de Janeiro	RJ	22002002	1995-10-07	22	M	150000	250000	1

O resultado dessa consulta são 6 registros com cliente entre 18 e 22 anos.

É possível também incluir mais condições no comando, vamos selecionar quem tem entre 18 e 22 anos e são do sexo masculino: SELECT * FROM tbcliente WHERE IDADE >= 18 AND IDADE <= 22 AND SEXO = 'M';, perceba que no AND é viável aplicarmos condições sobre campos diferentes conjuntamente.

Outra condição é o OR ("OU"), que pode ser usado em situações em que quero buscar clientes que moram no Rio de Janeiro ou no bairro Jardins em São Paulo simultaneamente, por exemplo: SELECT * FROM tbcliente WHERE cidade = 'Rio de Janeiro' OR BAIRRO = 'Jardins';.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	80012212	1990-09-01	27	F	170000	245000	0
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de JaneirO	RJ	22020001	2000-03-12	18	M	120000	220000	0
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
492472718	Eduardo Jorge	R. Volta Grande		Tijuca	Rio de Janeiro	RJ	22012002	1994-07-19	23	M	75000	95000	1
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0

Conseguimos também juntar às duas condições em um só comando, vamos supor que queremos buscar os clientes entre 18 e 22 anos que são do sexo masculino ou da cidade do Rio de Janeiro, ou do bairro Jardins em São Paulo.

    Uma boa prática ao escrever o código é usar os parênteses para isolar as condições.

SELECT * FROM tbcliente WHERE (IDADE >= 18 AND IDADE <= 22 AND SEXO = 'M')
 OR (cidade = 'Rio de Janeiro' OR BAIRRO = 'Jardins');

Quando juntamos várias condições em um único comando, chamamos lógica, não vamos entrar muito a fundo nesse treinamento sobre isso. Mas caso já trabalhe com TI ou com programação, já possui um contato com lógica de programação.

Então, o programa vai realizar a seleção do comando WHERE concatenando (encadeando em uma sequência lógica) várias condições usando AND e OR.

    Para melhor visualização, alguns registros dessa tabela foram omitidos.

CPF	NOME	ENDERECO1	ENDERECO2	BAIRRO	CIDADE	ESTADO	CEP	DATA_NASCIMENTO	IDADE	SEXO	LIMITE_CREDITO	VOLUME_COMPRA	PRIMEIRA_COMPRA
1471156710	Érica Carvalho	R. Iriquitia		Jardins	São Paulo	SP	80012212	1990-09-01	27	F	170000	245000	0
19290992743	Fernando Cavalcante	R. Dois de Fevereiro		Água Santa	Rio de Janeiro	RJ	22000000	2000-02-12	18	M	100000	200000	1
2600586709	César Teixeira	Rua Conde de Bonfim		Tijuca	Rio de JaneirO	RJ	22020001	2000-03-12	18	M	120000	220000	0
3623344710	Marcos Nogueira	Av. Pastor Martin Luther King Junior		Inhauma	Rio de Janeiro	RJ	22002012	1995-01-13	23	M	110000	220000	1
492472718	Eduardo Jorge	R. Volta Grande		Tijuca	Rio de Janeiro	RJ	22012002	1994-07-19	23	M	75000	95000	1
50534475787	Abel Silva	Rua Humaitá		Humaitá	Rio de Janeiro	RJ	22000212	1995-09-11	22	M	170000	260000	0
95939180787	Fábio Carvalho	R. dos Jacarandás da Península		Barra da Tijuca	Rio de Janeiro	RJ	22002020	1992-01-05	16	M	90000	180000	1

Note que o resultado dessa consulta serão clientes entre 18 e 22 anos, do sexo masculino (primeira condição) e os que têm menos ou mais satisfazem a segunda condição, são do Rio de Janeiro ou do Bairro Jardins em São Paulo.

Um ponto relevante para comentar é que todas as condições que estamos aplicando na cláusula WHERE podemos usar também nos comandos DELETE e UPDATE, isto é, os filtros compostos podem ser usados em outros comandos que já vimos também.




5-10 Seleção composta

Veja quais são os vendedores que estão de férias e que foram admitidos antes de 2016.

Opinião do instrutor

SELECT * FROM TABELA_DE_VENDEDORES WHERE YEAR(DATA_ADMISSAO) < 2016 AND DE_FERIAS = 1;




5-11 Consolidando o seu conhecimento

Chegou a hora de você seguir todos os passos realizados por mim durante esta aula. Caso já tenha feito, excelente. Se ainda não, é importante que você execute o que foi visto nos vídeos para poder continuar com os próximos cursos que tenham este como pré-requisito.

1) Acesse o Workbench e crie um novo script SQL.

2) Abra o arquivo SQL_10.sql e execute o script. As tabelas serão apagadas, recriadas e novos registros serão incluídos. O conteúdo do script é reproduzido abaixo.

USE sucos;

DROP TABLE tbcliente;

DROP TABLE tbproduto;

CREATE TABLE tbcliente
( CPF VARCHAR (11) ,
NOME VARCHAR (100) ,
ENDERECO1 VARCHAR (150) ,
ENDERECO2 VARCHAR (150) ,
BAIRRO VARCHAR (50) ,
CIDADE VARCHAR (50) ,
ESTADO VARCHAR (2) ,
CEP VARCHAR (8) ,
DATA_NASCIMENTO DATE,
IDADE SMALLINT,
SEXO VARCHAR (1) ,
LIMITE_CREDITO FLOAT ,
VOLUME_COMPRA FLOAT ,
PRIMEIRA_COMPRA BIT );

ALTER TABLE tbcliente ADD PRIMARY KEY (CPF);

CREATE TABLE tbproduto
(PRODUTO VARCHAR (20) ,
NOME VARCHAR (150) ,
EMBALAGEM VARCHAR (50) ,
TAMANHO VARCHAR (50) ,
SABOR VARCHAR (50) ,
PRECO_LISTA FLOAT);

ALTER TABLE tbproduto ADD PRIMARY KEY (PRODUTO);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('19290992743','Fernando Cavalcante','R. Dois de Fevereiro','','Água Santa','Rio de Janeiro','RJ','22000000','2000-02-12',18,'M',100000,200000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('2600586709','César Teixeira','Rua Conde de Bonfim','','Tijuca','Rio de Janeiro','RJ','22020001','2000-03-12',18,'M',120000,220000,0);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('95939180787','Fábio Carvalho','R. dos Jacarandás da Península','','Barra da Tijuca','Rio de Janeiro','RJ','22002020','1992-01-05',16,'M',90000,180000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('9283760794','Edson Meilelles','R. Pinto de Azevedo','','Cidade Nova','Rio de Janeiro','RJ','22002002','1995-10-07',22,'M',150000,250000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('7771579779','Marcelo Mattos','R. Eduardo Luís Lopes','','Brás','São Paulo','SP','88202912','1992-03-25',25,'M',120000,200000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('5576228758','Petra Oliveira','R. Benício de Abreu','','Lapa','São Paulo','SP','88192029','1995-11-14',22,'F',70000,160000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('8502682733','Valdeci da Silva','R. Srg. Édison de Oliveira','','Jardins','São Paulo','SP','82122020','1995-10-07',22,'M',110000,190000,0);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('1471156710','Érica Carvalho','R. Iriquitia','','Jardins','São Paulo','SP','80012212','1990-09-01',27,'F',170000,245000,0);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('3623344710','Marcos Nougeuira','Av. Pastor Martin Luther King Junior','','Inhauma','Rio de Janeiro','RJ','22002012','1995-01-13',23,'M',110000,220000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('50534475787','Abel Silva ','Rua Humaitá','','Humaitá','Rio de Janeiro','RJ','22000212','1995-09-11',22,'M',170000,260000,0);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('5840119709','Gabriel Araujo','R. Manuel de Oliveira','','Santo Amaro','São Paulo','SP','80010221','1985-03-16',32,'M',140000,210000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('94387575700','Walber Lontra','R. Cel. Almeida','','Piedade','Rio de Janeiro','RJ','22000201','1989-06-20',28,'M',60000,120000,1);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('8719655770','Carlos Eduardo','Av. Gen. Guedes da Fontoura','','Jardins','São Paulo','SP','81192002','1983-12-20',34,'M',200000,240000,0);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('5648641702','Paulo César Mattos','Rua Hélio Beltrão','','Tijuca','Rio de Janeiro','RJ','21002020','1991-08-30',26,'M',120000,220000,0);

INSERT INTO tbcliente (CPF,NOME,ENDERECO1,ENDERECO2,BAIRRO,CIDADE,ESTADO,CEP,DATA_NASCIMENTO,IDADE,SEXO,LIMITE_CREDITO,VOLUME_COMPRA,PRIMEIRA_COMPRA) VALUES ('492472718','Eduardo Jorge','R. Volta Grande','','Tijuca','Rio de Janeiro','RJ','22012002','1994-07-19',23,'M',75000,95000,1);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1040107','Light - 350 ml - Melância','Lata','350 ml','Melância',4.555);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.008);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.309);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1004327','Videira do Campo - 1,5 Litros - Melância','PET','1,5 Litros','Melância',19.51);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1088126','Linha Citros - 1 Litro - Limão','PET','1 Litro','Limão',7.004);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('544931','Frescor do Verão - 350 ml - Limão','Lata','350 ml','Limão',2.4595);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1078680','Frescor do Verão - 470 ml - Manga','Garrafa','470 ml','Manga',5.1795);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1042712','Linha Citros - 700 ml - Limão','Garrafa','700 ml','Limão',4.904);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('788975','Pedaços de Frutas - 1,5 Litros - Maça','PET','1,5 Litros','Maça',18.011);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1002767','Videira do Campo - 700 ml - Cereja/Maça','Garrafa','700 ml','Cereja/Maça',8.41);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('231776','Festival de Sabores - 700 ml - Açai','Garrafa','700 ml','Açai',13.312);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('479745','Clean - 470 ml - Laranja','Garrafa','470 ml','Laranja',3.768);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1051518','Frescor do Verão - 470 ml - Limão','Garrafa','470 ml','Limão',3.2995);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1101035','Linha Refrescante - 1 Litro - Morango/Limão','PET','1 Litro','Morango/Limão',9.0105);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('229900','Pedaços de Frutas - 350 ml - Maça','Lata','350 ml','Maça',4.211);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1086543','Linha Refrescante - 1 Litro - Manga','PET','1 Litro','Manga',11.0105);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('695594','Festival de Sabores - 1,5 Litros - Açai','PET','1,5 Litros','Açai',28.512);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('838819','Clean - 1,5 Litros - Laranja','PET','1,5 Litros','Laranja',12.008);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('326779','Linha Refrescante - 1,5 Litros - Manga','PET','1,5 Litros','Manga',16.5105);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('520380','Pedaços de Frutas - 1 Litro - Maça','PET','1 Litro','Maça',12.011);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1041119','Linha Citros - 700 ml - Lima/Limão','Garrafa','700 ml','Lima/Limão',4.904);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('243083','Festival de Sabores - 1,5 Litros - Maracujá','PET','1,5 Litros','Maracujá',10.512);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('394479','Sabor da Montanha - 700 ml - Cereja','Garrafa','700 ml','Cereja',8.409);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('746596','Light - 1,5 Litros - Melância','PET','1,5 Litros','Melância',19.505);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('773912','Clean - 1 Litro - Laranja','PET','1 Litro','Laranja',8.008);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('826490','Linha Refrescante - 700 ml - Morango/Limão','Garrafa','700 ml','Morango/Limão',6.3105);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('723457','Festival de Sabores - 700 ml - Maracujá','Garrafa','700 ml','Maracujá',4.912);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('812829','Clean - 350 ml - Laranja','Lata','350 ml','Laranja',2.808);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('290478','Videira do Campo - 350 ml - Melância','Lata','350 ml','Melância',4.56);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('783663','Sabor da Montanha - 700 ml - Morango','Garrafa','700 ml','Morango',7.709);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('235653','Frescor do Verão - 350 ml - Manga','Lata','350 ml','Manga',3.8595);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1002334','Linha Citros - 1 Litro - Lima/Limão','PET','1 Litro','Lima/Limão',7.004);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1013793','Videira do Campo - 2 Litros - Cereja/Maça','PET','2 Litros','Cereja/Maça',24.01);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1096818','Linha Refrescante - 700 ml - Manga','Garrafa','700 ml','Manga',7.7105);

INSERT INTO tbproduto (PRODUTO, NOME, EMBALAGEM, TAMANHO, SABOR, PRECO_LISTA) VALUES ('1022450','Festival de Sabores - 2 Litros - Açai','PET','2 Litros','Açai',38.012);

3) Verifique o conteúdo das tabelas de produtos e clientes digitando:

SELECT * FROM tbproduto;

SELECT * FROM tbcliente;

4) Crie um novo script. Vamos fazer algumas consultas a base.

5) Digite:

SELECT * FROM tbcliente;

SELECT CPF, NOME, ENDERECO1, ENDERECO2, BAIRRO, CIDADE, ESTADO, CEP,
DATA_NASCIMENTO, IDADE, SEXO, LIMITE_CREDITO, VOLUME_COMPRA, PRIMEIRA_COMPRA
FROM tbcliente;

Note que os dois comandos retornam a mesma coisa. Podemos usar o * para selecionar todos os campos ou discriminar um por um.

6) Podemos selecionar alguns campos apenas:

SELECT CPF, NOME FROM tbcliente;

7) Também é possível limitar a saída de registros:

SELECT CPF, NOME FROM tbcliente LIMIT 5;

8) Ou também criar um Label (Chamamos de Alias) para cada campo:

SELECT CPF AS CPF_CLIENTE, NOME AS NOME_CLIENTE FROM tbcliente;

9) Os registros podem ser filtrados usando o mesmo tipo de cláusula WHERE usada no UPDATE e DELETE.

SELECT * FROM tbproduto WHERE PRODUTO = '544931';

10) Mas não é somente pela chave primária que podemos filtrar as consultas.

SELECT * FROM tbcliente WHERE CIDADE = 'Rio de Janeiro';

SELECT * FROM tbproduto WHERE SABOR = 'Cítricos';

11) Inclusive este tipo de filtro WHERE pode ser usado no UPDATE e DELETE. Digite o comando abaixo de UPDATE para fazer uma alteração em diversos registros ao mesmo tempo.

UPDATE tbproduto SET SABOR = 'Cítricos' WHERE SABOR = 'Limão';

12) Podemos fazer consultas usando condições baseadas em números (Decimais ou inteiros). Crie um novo script e vamos a alguns exemplos:

SELECT * FROM tbcliente WHERE IDADE = 22;

Aqui vemos uma igualdade.

13) Mas podemos usar sinal de maior, menor, maior ou igual, menor ou igual. Olhe alguns exemplos:

SELECT * FROM tbcliente WHERE IDADE > 22;

SELECT * FROM tbcliente WHERE IDADE < 22;

SELECT * FROM tbcliente WHERE IDADE <= 22;

14) Temos o sinal de diferente que é expresso como <>. Veja abaixo:

SELECT * FROM tbcliente WHERE IDADE <> 22;

15) As condições de maior, menor, maior ou igual, menor ou igual, diferente podem ser aplicado a textos. O critério será a ordem alfabética.

SELECT * FROM tbcliente WHERE NOME >= 'Fernando Cavalcante';

SELECT * FROM tbcliente WHERE NOME <> 'Fernando Cavalcante';

16) As condições de maior, menor, maior ou igual, menor ou igual, igual e diferente não se aplica muito bem a campos FLOAT.

SELECT * FROM tbproduto WHERE PRECO_LISTA > 16.008;

SELECT * FROM tbproduto WHERE PRECO_LISTA < 16.008;

SELECT * FROM tbproduto WHERE PRECO_LISTA <> 16.008;

17) O comando BETWEEN pode ser aplicado.

SELECT * FROM tbproduto WHERE PRECO_LISTA BETWEEN 16.007 AND 16.009;

18) Podemos usar como filtro datas. veja alguns exemplos:

SELECT * FROM tbcliente WHERE DATA_NASCIMENTO = '1995-01-13';

SELECT * FROM tbcliente WHERE DATA_NASCIMENTO > '1995-01-13';

SELECT * FROM tbcliente WHERE DATA_NASCIMENTO <= '1995-01-13';

19) Existem algumas funções de data que podem ser usadas como filtros.

SELECT * FROM tbcliente WHERE YEAR(DATA_NASCIMENTO) = 1995;

SELECT * FROM tbcliente WHERE MONTH(DATA_NASCIMENTO) = 10;

20) Podemos usar filtros compostos usando, entre cada teste, os comandos AND ou OR. Veja abaixo alguns exemplos que podem ser testados no Workbench.

SELECT * FROM tbproduto WHERE PRECO_LISTA BETWEEN 16.007 AND 16.009;

SELECT * FROM tbproduto WHERE PRECO_LISTA >= 16.007;

SELECT * FROM tbproduto WHERE PRECO_LISTA <= 16.009;

SELECT * FROM tbproduto WHERE PRECO_LISTA >= 16.007 AND PRECO_LISTA <= 16.009;

SELECT * FROM tbcliente WHERE IDADE >= 18 AND IDADE <= 22;

SELECT * FROM tbcliente WHERE IDADE >= 18 AND IDADE <= 22 AND SEXO = 'M';

SELECT * FROM tbcliente WHERE CIDADE = 'Rio de Janeiro' OR BAIRRO = 'Jardins';

SELECT * FROM tbcliente WHERE (IDADE >= 18 AND IDADE <= 22 AND SEXO = 'M') OR (cidade = 'Rio de Janeiro' OR BAIRRO = 'Jardins');

Opinião do instrutor

Continue com os seus estudos, e se houver dúvidas, não hesite em recorrer ao nosso fórum!





5-12 O que aprendemos?

  Como visualizar os dados de uma tabela;
  
  Como segregar a seleção de dados;
  
  A usar as condições de maior e menor na seleção de dados da tabela;
  
  Como filtrar dados através de datas.
  
  Como implementamos filtros compostos.




5-13 Conclusão


Transcrição

Parabéns! Você completou o curso de Introdução ao SQL com MySQL: manipule e consulte dados.

Como mencionado no início desse treinamento, este curso é voltado para quem nunca viu banco de dados e não conhecia SQL. Agora, você possui uma boa base para dar continuidade aos seus estudos em cursos mais avançados.

Nós iniciamos esse treinamento baixando e instalando o MySQL, vimos alguns detalhes de configurações para fazer a instalação funcionar e, em seguida, conversamos um pouco sobre a história do SQL — como surgiu, suas características atuais e relações quando comparado a outros bancos de dados do mercado.

Conhecemos os componentes que um banco de dados possui, como, as tabelas, os campos, as linhas, as chaves primárias e estrangeiras, os triggers, as procedures e as funções. Após essa breve introdução sobre os elementos de um banco de dados, fomos para a linguagem SQL e aprendemos sobre o seu histórico — como surgiu e sua evolução.

Em seguida, vimos como criar e excluir um banco de dados e as tabelas. Com as tabelas criadas, inserimos dados nelas utilizando o comando INSERT INTO e modificamos algumas informações já existentes, visto que podemos ter dados mutáveis, como no cadastro de cliente com algum status que se altera. Vimos também, como excluir dados em uma tabela, já que podemos ter campos que perderam a validade e, consequentemente, não possui mais uma função.

Aprendendo a criar banco de dados, tabelas e manipular, incluir, alterar e excluir dados, vimos como consultá-los utilizando o comando SELECT, como selecionar e exibir todos ou alguns campos que compõem a tabela e inserimos nomes temporários para as colunas usando o ALIAS.

Estudamos também sobre os filtros simples (igual, maior, menor, maior ou igual, menor ou igual e BETWEEN) e compostos (AND e OR), para desmembrar as informações que queremos exibir. Com essa visão geral sobre o SQL, você conseguirá acompanhar treinamentos mais avançados sobre esse tema.

Espero vocês nos próximos cursos avançados de MYSQL.

Abraços, obrigado pela preferência e até a próxima!


