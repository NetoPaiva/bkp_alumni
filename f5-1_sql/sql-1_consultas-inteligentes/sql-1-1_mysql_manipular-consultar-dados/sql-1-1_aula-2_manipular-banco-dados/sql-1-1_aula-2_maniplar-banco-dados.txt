https://cursos.alura.com.br/course/mysql-manipule-dados-com-sql

Data Science > Cursos de SQL e Banco de Dados

Curso de
SQL com MySQL: manipule e consulte dados


Aula 2 | 59min

Manipulando o banco de dados


https://cursos.alura.com.br/course/mysql-manipule-dados-com-sql/section/8033/tasks

  2-1 Definições
  2-2 Localização da tabela
  2-3 Componentes de tabelas
  2-4 Agrupando tabelas
  2-5 Conhecendo o Workbench
  2-6 Criando um banco de dados
  2-7 Comando para criação de banco de dados
  2-8 Criando um banco de dados usando assistente
  2-9 Criando um banco de dados
  2-10 Apagando banco de dados
  2-11 Exclusão de um banco de dados
  2-12 MYSQL por linha de comando
  2-13 Consolidando o seu conhecimento
  2-14 O que aprendemos?



2-1 Definições

Resumo:

  - Como operar Banco de Dados (data base - db)
    - entender organização / 
    - criação de comandos

  - Aprender linguagem SQL usando ferramenta MySQL

  - O que é um Banco de Dados (db)
    - um repositório
    - armazenar dados
      - HD local ou remoto
    - ocupa espaço de armazenamento
    - permite consulta aos dados

  - Entidades do db
    - estruturas de organização
    - determinam como dados são armazenados
    - tabela é a principal entidade
    - db pode conter diversas tabelas

  - Tabela
    - semelhante a uma planilha de Excel
    - composta de linhas e colunas
    - precisa definir os elementos ao criar a tabela
      - quantidade e categoria

  - Colunas (campos)
    - ao criar a tabela
      - definir quantidade e categoria (valores) dos campos
    - cada coluna tem apenas uma categoria (tipo de dado)
      - texto (string)
      - números (float ou int)
      - lógico (true ou false)
      - binário (diferente do formato texto - fotos...)

  - Linhas (registros)
    - quantidade infinita
    - permite expandir db
    - sujeita ao espaço em disco

  - chave primária (primary key)
    - é o valor do campo
    - referente à tabela
    - não obrigatório ao criar tabela
    - semelhante ao "id" (só pode ter um por linha)
    - valor de um campo não pode ter dois registros
    - exemplo seria o CPF (único para cada usuário)
    - não pode repetir em uma linha

  - chave primária composta
    - é a combinação entre campos
    - não pode repetir a combinação entre colunas

  - chave primária e chave primária composta
    - não podem se repetir nos registros da tabela

  - chave estrangeira (foreign key)
    - permite relação entre tabelas do DB
    - DB pode ter diversas tabelas
    - cada tabela armazena um tipo de informação
    - chave estrangeira faz a ligação entre os dados
    - característica do Bancos Relacionais
      - relação entre as tabelas

  - integridade da informação
    - garante a existência dos dados
    - dependentes de outras tabelas

  - transacionais
    - tipo de bancos anteriores aos relacionais
    - não possuem ligação entre tabelas
    - risco de falta de integridade

  - índice
    - localizador da informação
    - torna a busca mais fáceil e rápida
    - algoritmo interno
    - estabelece critérios de busca
    - se houver chave estrangeira
      - cria índices dos campos interligados

  - esquemas (schemas)
    - agrupa tabelas por temas
    - ferramenta de organização
    - é o conjunto de tabelas de mesmo assunto
    - esquemas diferentes podem se relacionar

  - visão (view)
    - comportamento similar a tabela
    - gera uma tabela com o retorno dos dados consultados em uma ou mais tabelas diferentes
    - depende de regra pé-estabelecida

  - consulta (query)
    - busca informações nas tabelas
    - precisa definir quais tabelas consultar

  - unir (join)
    - cláusula para realizar consulta em mais de uma tabela
    - critérios para unir as tabelas
    - permite definir filtros
    - o resulta da consulta pode gerar uma "view"

  - procedimento (procedure)
    - realiza alguns tipos de lógica estruturada para comandos de repetição
      - if
      - while

  - função (function)
    - um tipo de procedimento
    - utilizado dentro de um comando de consulta
    - permite refinar resultado da busca
    - MySQL possuí biblioteca de funções
      - elimina espaços em branco
      - transforma maiúscula em minúscula
      - cálculos de datas

  - aviso programado (trigger)
    - emite aviso quando condição for atendida
    - alguma ação ocorra no banco ou tabela
    - evita falta de integridade dos dados
    - pode ser
      - função
      - procedimento
      - comando único

  - recaptular
    - Banco de Dados Relacional
    - pode ter diversas
      - tabelas
      - views
      - schemas
      - procedures
      - funções
    - tabelas são compostas por
      - campos (colunas)
      - registros (linhas)
      - possuem
        - chave primária
        - chave primária composta
        - chave estrangeira
        - índices


Transcrição

O objetivo nesse treinamento, como já mencionado, é apresentar para o(a) estudante o primeiro contato com a linguagem SQL.

Então, primeiramente, para compreender como o SQL funciona é preciso entender como trabalha o banco de dados. Visto que a maneira que o banco de dados é organizado está diretamente relacionado a forma que vamos criar os comandos SQL. Sendo assim, considerado um pré-requisito entender como opera um banco de dados.

Lembrando que nesse treinamento estamos usando o MySQL para mostrar como funciona a linguagem SQL, poderíamos utilizar Oracle ou SQL Server da Microsoft, por exemplo. Mas como esse curso faz parte de uma carreira mais completa de MySQL, utilizaremos esse banco de dados.

Vamos entender como é organizado o banco de dados. Os conceitos que vou apresentar podem até serem aplicados em outros bancos, como o da Oracle e SQL Server.

Conheceremos agora um pouco mais sobre esses conceitos.

O banco de dados é um repositório que armazena dados que podem ser consultados, fica armazenado no disco rígido, como o SSD ou HDD, de outro modo, ocupa espaço no disco como, por exemplo, um arquivo word ou uma planilha de Excel. Ou seja, conseguimos no ambiente ir para um diretório específico e visualizar um ou mais arquivos que representam o banco de dados. Percebe-se, com isso, que a entidade maior é o próprio banco de dados.

No banco de dados há diversas entidades, estruturas que organizam como os dados são armazenados. Uma das principais entidades é a tabela, podendo conter várias no mesmo banco de dados.

Uma tabela, fazendo uma analogia, é como uma planilha no Excel — que há colunas e linhas. Mas, diferente da planilha de Excel, que ao gerar uma nova conseguimos visualizar uma série de colunas e linhas em branco, no momento de criação da tabela é preciso já estabelecer as definições do que ela abrangerá.

Algumas dessas definições é a quantidade e categoria de cada campo. O campo seria a coluna, então podemos ter, por exemplo, campos da categoria texto, número, que podemos ter com casas decimais ou inteiros, lógico(verdadeiro ou falso), binário, que há bites armazenados que podem representar uma imagem ou algum outro arquivo diferente do formato texto e assim por diante. Portando, ao criar uma tabela, é necessário já definir quantos e as categorias de cada coluna.

Os valores de uma mesma coluna não podem ser de grupos diferentes, isto é, se o campo foi estabelecido como numérico, podemos apenas a armazenar números nesse campo. Se incluirmos algo que fuja muito, tipo um texto, o banco de dados retorna erro.

Já as linhas das tabelas, são chamadas registros. Este, diferente dos campos, possui número infinito - a depender do espaço em disco disponível para o banco de dados expandir. Inclusive, ao gerar um banco de dados podemos determinar políticas de crescimento ou o limite máximo que ele pode ampliar.

Outro conceito importante referente a tabela, é a chave primária (primary key). No momento de criar uma tabela, não obrigatoriamente, podemos estabelecer uma chave primária, isso significa que os valores de um campo específico não podem se repetir em uma linha.

Por exemplo, vamos supor que a tabela seja a "tabela_cadastro_clientes" e temos na primeira coluna o "CPF" dos clientes e na terceira o "Nome". Se escolhermos o CPF como chave primária, isso quer dizer que não podemos ter dois registros (linhas) na tabela que tenham os mesmos valores na coluna "CPF". Isso faz sentido, já que ninguém possui CPF idênticos, já o nome é possível repetir, por não ser considerado chave primária.

Já se tivermos uma chave primária composta, o que não pode repetir é a combinação entre as colunas. Portando, chave primária são os valores de campos ou combinação entre campos — chave primária composta — que não podem se repetir nos registros da tabela.

No banco de dados podemos ter várias tabelas, cada uma possui fragmento da informação armazenada, podendo essas tabelas se relacionarem através da chave estrangeira (foreign key). Como na "tabela_cadastro_clientes" que um campo é o "CPF" e o outro é "Nome" e na outra tabela que representa as vendas de produto para cada cliente, "tabela_vendas", e nesta também temos o campo "CPF".

Ao criarmos uma chave estrangeira entre os campos "CPF" da "tabela_vendas" e da "tabela_cadastro_clientes", isso significa que teremos uma ligação entre elas. Como mencionado em vídeos anteriores, o SQL surgiu da necessidade de manipular e armazenar dados em um banco de dados relacional, que possui relações entre as tabelas, isto é, possuem chaves estrangeiras. Isso faz com o que a informação tenha integridade, visto que não seria possível ter um cliente comprando um produto sem estar pré-cadastrado na tabela de clientes.

Anteriormente aos bancos de dados relacionais, eram utilizados os transacionais. Em outras palavras, não possuíam essa ligação entre as tabelas, podendo assim, registrar o CPF de um cliente na "tabela_vendas" que não esteja, necessariamente, pré-cadastrado na "tabela_cadastro_clientes". Isso gera um problema de integridade do dado, por isso, os bancos de dados relacionais surgiram para melhorar a qualidade da informação armazenada.

Nas tabelas também podemos encontrar os índices. Estes permitem encontrar informações da tabela de maneira mais rápida. Como exemplo, vamos imaginar que queremos obter todos os clientes que começam com o nome Victorino, se não tivermos um índice, o banco de dados relacional terá de percorrer registro por registro até encontrar o nome solicitado pela primeira vez e, após encontrar, informar e seguir buscando até o término das linhas para verificar se há mais de um cliente com esse nome.

Agora, se tivermos um índice para o campo "Nome" temos um algoritmo interno - como se já estivesse ordenado alfabeticamente os elementos da coluna "Nome". Isto é, já sabemos que o nome Victorino consta nos últimos registros com a inclusão do índice, não precisando percorrer todas as linhas até encontrar o primeiro nome com a letra V.

    O índice permite, neste caso, que a busca se inicie nas linhas que os nomes começam com a letra V e a partir disso, procurar o nome Victorino, tornando a busca mais rápida. Portanto, o índice serve para facilitar e agilizar a procura.

    Quando temos uma chave estrangeira, automaticamente o banco de dados cria índices nos campos que se interrelacionam, para que seja viável, por exemplo, ao cadastrar um cliente na "tabela_vendas" o banco de dados, internamente, verifique se o cliente consta na "tabela_cadastro_clientes" e para encontrar rápido é proveitoso que a tabela original já possua índice.

Recapitulando, no banco de dados há diversas tabelas, composta por campos (colunas) e registros (linhas), essas tabelas possuem chaves estrangeiras, primárias e podem conter índices.

Já quando estamos nos referindo a esquemas (Schemas), é o conjunto de tabelas que representam o mesmo assunto. As tabelas de esquemas diferentes podem se relacionar, transformar em Schemas é apenas uma forma de agrupar as tabelas por tema, sendo mais utilizado no sentido de organização.

O banco de dados possui também a chamada View (visão), um agrupamento de tabelas. Vamos aprender mais adiante nesse curso sobre query (consulta), e essa consulta pode me retornar não apenas as informações de uma determinada tabela, mas de duas os mais através das chaves estrangeiras. Após conseguir unir duas ou mais tabelas e gerar um resultado para essa consulta, podemos transformar-lá em uma view.

Isso significa que a view possui um comportamento similar a tabela, mas que por trás dela já há uma consulta estabelecida com as regras de negócio para agrupar as informações solicitadas.

Em SQL, tratamos as views como tabelas já existentes, contudo, na verdade, é uma lógica por trás. Algumas views podem ter performances não muito ágeis caso seja construída por comandos SQL muito custosos ou rebuscado.

Como já mencionado, temos no SQL comandos de consultas (queries) e ao realizar essa consulta precisamos definir em quais tabelas gostaríamos de buscar essas informações. Caso esses dados que queremos, esteja apenas em uma tabela, basta incluir o nome dela. Já se essas informações estiverem em mais de uma tabela, será necessário utilizar a cláusula Join.

O Join uni as tabelas através de um critério, ao elaborar essa consulta que junta tabelas podemos definir filtros, tal como clientes apenas no sexo masculino e/ou que moram apenas na região Sul. Essa consulta que aplicamos o filtro pode ser uma view.

Internamente, o banco de dados possuem as procedures. No começo desse treinamento havia mencionado que a linguagem SQL não é estruturada, mas a partir disso os estudiosos de banco de dados MySQL, Oracle e SQL Server criaram linguagens que não estão mais no padrão ANSI, mas linguagens proprietárias que permitem utilizar comando SQL para fazer algum tipo de lógica estruturada com if, while, entre outros comandos de repetições, por exemplo. Como se tivéssemos um programa em uma linguagem nativa do banco de dados utilizando comando SQL.

Nas procedures, podemos ter as funções. Estas são cálculos montados com campos que podemos usar dentro de um comando de consulta. Podemos criar uma função que facilite uma visualização ou contabilização e usa-lá para realizar as consultas.

O próprio banco MySQL possui um catálogo de funções: como tirar espaços em branco do registro, transformar letra maiúscula em minúscula, efetuar cálculos complexos como de datas — quantos dias tem entre determinadas datas, entre outras funções.

No banco de dados, também, temos o trigger. Este é um aviso programado caso algo ocorra no banco de dados ou tabela. Como, se quisermos ser avisados caso alguém realize alguma alteração ou delete informações nas tabelas. Este aviso poder ser uma função, uma procedure ou um único comando SQL, que será executado quando a condição da trigger for satisfeita.

Exemplificando, se tivermos duas tabelas "tabela_clientes" e a "tabela_taxas". Todo cliente cadastrado é preciso ir à tabela taxas e criar uma taxa com o valor zero na "tabela_taxas". Podemos ter uma trigger que toda vez que criado um cadastro na tabela de cliente, irá à tabela de taxas inserir o código do cliente e mais uma taxa default (padrão).

Com isso, estamos garantindo que ao incluir um novo cliente, ele(a) já terá um valor de taxa, mesmo que seja zero. O trigger pode ser utilizado para diversas outras situações no banco de dados.

Então, o banco de dados possui todos esses componentes: tabelas, views, procedures e funções. Espero que esses conceitos sejam úteis para incentivar vocês a conhecer mais sobre o que é um banco de dados.




2-2 Localização da tabela

Onde é criada a tabela dentro do MYSQL?

No Banco de Dados
  Alternativa Certa! É no banco de dados onde criamos as tabelas.

Na raiz do MYSQL
  Alternativa Errada! Aqui temos apenas os tipos de estruturas onde serão criadas as entidades do MYSQL.

Nas Stored Procedures
  Alternativa Errada! Stored Procedures possui programas ou funções a serem executados no MYSQL.



2-3 Componentes de tabelas

Ache a alternativa falsa:

Em uma tabela temos:

Numa tabela temos campos, registros, chaves primárias e estrangeiras
  Alternativa Errada! Todas as opções acima realmente estão nas tabelas. Logo, esta alternativa é verdadeira.

Views, chaves primárias, campos, registros
  Alternativa Certa! As views não fazem parte de uma tabela. Logo, esta alternativa é falsa, por isso deve ser escolhida conforme o enunciado da questão.

Chaves primárias, chaves estrangeiras, índices
  Alternativa Errada! Todas as opções acima realmente estão nas tabelas. Logo, esta alternativa é verdadeira.



2-4 Agrupando tabelas

Como podemos agrupar as tabelas?

Views
  Alternativa Errada! As views não são agrupadores de tabelas, e sim consultas que podem ou não conter várias tabelas.

Stored Procedures.
  Alternativa Errada! Nas Stored Procedures, fazemos programas para manipular dados do banco.

Em esquemas (Schema)
  Alternativa Certa! As tabelas podem estar contidas em um esquema.




2-5 Conhecendo o Workbench

Transcrição

Como o foco desse treinamento é conhecer um pouco como funciona o SQL, instalamos com o MySQL uma interface gráfica chamada MySQL Workbench, que vamos usar para aprender SQL.

Vamos compreender um pouco sobre o funcionamento do Workbench. Para abrir clicaremos em "Windows" e no campo de busca escreveremos "Workbench", irá aparecer MySQL Workbench 8.0 CE, versão mais atual durante a gravação do curso.

Selecionando essa opção, será mostrado a tela principal Welcome to MySQL Workbench, que na parte inferior temos várias conexões disponíveis. Clicando no + ao lado de "MySQL Connection" mostrará uma tela "Setup New Connection" em que é possível configurar uma nova conexão. Isto é, o Workbench faz o papel do cliente e, posso acessar com o mesmo Workbench diferentes servidores MySQL. Neste caso, já estamos conectados no servidor MySQL da própria máquina.

Não vamos criar uma conexão, então clicaremos em "Cancel" na tela "Setup New Connection". Vamos usar apenas a conexão criada durante a instalação para nos conectar com o MySQL que está no nosso ambiente.

Iremos selecionar a conexão "Local instance MySQL80" e será aberta uma janela inicial do MySQL Workbench. Clicaremos em "Schemas", nessa aba temos outros bancos de dados, tais como sakila, world e sys. Os dois primeiros são bancos de dados exemplos que o MySQL instala, já o sys é um banco de dados utilizado pelo sistema, como o nome já diz.

Veremos mais para frente, talvez em outros treinamentos, que as configurações internas do MySQL também são tabelas em bancos de dados internos - diferente dos que vamos trabalhar.

Do lado esquerdo no banco de dados MySQL em world clique em "Tables" (tabelas), note ser possível observar o cadastro das colunas, dos índices, das chaves estrangeiras e triggers. Se selecionarmos os campos, por exemplo, conseguimos visualizar o nome de cada coluna que compõe a tabela city.

Na área central da tela, que no momento está vazia, é o local que vamos digitar nossos comandos SQL - consulta, inclusão, alteração de informação ou exclusão de campos e/ou tabelas. Vamos analisar melhor mais para frente o que isso significa, mas apenas exemplificando para facilitar a compreensão: insira no espaço em branco o comando select * from city e em seguida dê um duplo clique no banco de dados world para rodar, note que ficou em negrito (bold), isso quer dizer que os comandos inseridos na área de código estão relacionados ao banco de dados selecionado.

    select * from city. Neste comando estamos selecionando (select) todos os campos (*) (asterisco) da tabela city.

É por esse motivo que o SQL surgiu do termo "linguagem estruturada em inglês", visto que seus comandos são escritos nesse idioma.

    Select (selecionar)
    From (de)
    Em negrito são os componentes do banco de dados
    Em azul-claro são os comandos da linguagem SQL

Neste caso, select e from são comandos SQL, já (*) e city não. Isso está relacionado com a seleção que estou fazendo.

Para executar a consulta, clique no ícone de raio na parte superior da área que escrevemos o código, como resultado obtemos todas as informações da tabela, como as colunas ("ID", "Name" (nome),"CountryCode" (código do país),"District" (Distrito),"Population" (população)) e as linhas.

Tabela gerada:

    Para melhorar visualização, alguns elementos da tabela foram omitidos.

Id	Name	          CountryCode	District	    Population
1 	Kabul	          AFG	        Kabol	        1780000
2	  Qandahar	      AFG	        Qandahar	    2375500
3	  Herat	          AFG	        Herat	        186800
4	  Mazar-e-Sharif	AFG	        Balkh	        127800
5	  Amsterdam	      NLD	        Noord-Holland	731200

Acrescentando o comando select * from country na interface, é preciso inserir um ponto e vírgula (;) ao final dos comandos para que o programa identifique o encerramento de um e execute o próximo.

SELECT * FROM CITY;
SELECT * FROM COUNTRY;

Clicando para executar os comandos novamente, temos como resultado duas abas. A primeira aba é a City 2, da tabela gerada anteriormente e a outra Country 3 é o retorno do segundo comando da tabela country, com todos os seus elementos.

Se tirarmos o ponto e vírgula do final do primeiro comando, a própria IDE nos retorna um erro, com um X (xis) em vermelho, informando haver um erro na segunda linha. Passando o mouse por cima desse aviso, será mostrado o motivo, no caso aparece a mensagem ""SELECT" is not valid at this position, expecting : EOF, ';'", isto é, a seleção é inválida nesta posição e é esperado um ponto e vírgula ou um EOF (End-of-file), em português, fim de arquivo.

Se tentarmos rodar esse comando com o aviso, será mostrado o erro no lugar do retorno da tabela esperada, no caso aparecerá a seguinte mensagem select * from city select * from country. Porém, há uma forma de executar apenas um dos comandos, selecionando com o mouse somente a linha que quero executar e, novamente, clicar no ícone de raio para rodar. Isso ocorre pelo fato do Workbench entender que deve executar apenas o comando selecionado e ignorar os outros. Por isso, não é necessário colocar o ponto e vírgula ao usar essa forma de execução.

Com a finalidade de explorar um pouco mais com vocês essa área, vamos inserir o nome errado da coluna com o comando select * from countryxxx;, perceba que quando erramos nomes que não estão relacionadas com as palavras chaves do SQL, como o nome da tabela, a IDE não consegue identificar que esse nome não existe. Retornando o erro Erro code: 1146. Table 'world.countryxxx'doesn't exist apenas após a execução do código, mas note que o primeiro comando segue funcionando normalmente.

Tudo isso que foi mostrado para vocês é apenas uma introdução de como trabalhamos o Workbench.



2-6 Criando um banco de dados

Transcrição

Você pode fazer o download completo do código realizado neste vídeo para criar o banco de dados neste link.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/02/SQL_01.sql


Você pode acessar a documentação MySQL usada para a explicação dessa aula neste link
https://dev.mysql.com/doc/refman/8.0/en/create-database.html


Agora que estamos com as instalações necessárias e sabemos usar o Workbench, vamos começar a manipular os bancos de dados. Para isso, primeiro, é preciso criar um banco de dados, além dos exemplos que já temos que vieram junto no momento da instalação do MySQL.

A sintaxe para criar o banco de dados é o comando create database, note ser possível gerar um database ou um schema.

    Lembrando que no banco de dados relacional, o agrupamento de tabelas é chamado de schema, já no MySQL database e schema são sinônimos.

Então, podemos utilizar CREATE {DATABASE | SCHEMA} para criar um banco de dados. Outra parte que pode ser acrescentada no comando é o [IF NOT EXISTS] db_name, isto é, se não for encontrado o nome atribuído ao banco de dados, será criado e, caso exista não será feita nenhuma execução.

Código completo:

CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] db_name
      [create_specification]

   create_specification:
            [DEFAULT] CHARACTER SET [=] charset_name
            [DEFAULT] COLLATE [=] collation_name
            DEFAULT ENCRYPTION [=] { 'Y' | 'N'}

Analisando as informações em create_specification, perceba que se não for indicado o character set, como, do tipo UTF-8 ou UTF-16, o código utiliza o padrão (default).

    UTF-8 - UCS Transformation Format 8 (formato de transformação UCS 8)
    UTF-16- 16-bit Unicode Transformation Format (formato de Transformação Unicode)

    No nosso computador possuímos uma tabela interna chamada ASCII (da sigla American Standard Code for Information Interchange, "Código Padrão Americano para o Intercâmbio de Informação"), em que cada letra digitada no computador é convertida em um código que a representa.

O código ASCII pode diferir conforme o idioma, como na língua inglesa que não existe acento e nem cê-cedilha. Por isso, a tabela ASCII original não comporta esses tipos de caracteres especiais. Porém, há tabelas que integram esses caracteres especiais, então, ao digitar uma letra com acento será buscado na tabela o código correspondente.

Por esse motivo, em character set vamos informar para o banco de dados o conjunto de caracteres permitidos, a depender do idioma. Por exemplo, se a construção do banco de dados são com informações em português, é necessário, portanto, que seja incluído caracteres da língua portuguesa.

Apenas por questão de conhecimento, o collate também específica o padrão desses conjuntos de caracteres a serem usados e o encryption informa se o banco de dados será criptografado ou não.

Como no momento estamos aprendendo SQL, essa informação não é tão relevante e, em razão disso, vamos somente rodar o comando create.

Voltando para o Workbench, digitando na área do código CREATE DATABASE SUCOS; estamos criando um database chamado sucos. Quando selecionamos o botão para rodar, no resultado é exibido a mensagem 1 row(s) affected (uma linha disponibilizada) informando que foi executado com sucesso.

Perceba que o banco de dados sucos ainda não consta em Schemas do lado esquerdo do MySQL, para que aparaceça, basta apertar o botão direito do mouse na aba e clicar na última opção em refresh all (atualize tudo) que aparece no espaço em que é armazenado os bancos de dados.

Vamos agora visualizar o local que esse banco de dados está criado fisicamente no disco. Selecione a sua pasta de arquivos do próprio computador e procure o repositório do MySQL. No caso, o caminho é o C:\ProgramData\MySQL\MySQLServer 8.0 do MySQL e note haver um arquivo nomeado my.ini, este é lido pelo MySQL toda vez que ele é iniciado, ou seja, é o arquivo de inicialização.

No arquivo my.ini. há uma série de variáveis de ambiente. Abrindo esse arquivo, clicando com o botão direito do mouse, em um editor de texto, no caso vou usar o Edit with Notepad++, conseguimos encontrar a variável datadir = C:/ProgramData/MySQL/MySQLServer 8.0/Data, que mostra o ambiente onde o banco de dados está localizado.

Voltando para os diretórios no computador, na pasta "Data" note que temos um diretório chamado sucos agora, porém dentro não temos nenhum arquivo ainda. Mas, caso selecionarmos o repositório world é possível visualizar uma série de arquivos separados, as tabelas com a extensão .ibd, isto é, cada tabela possui um registro separado.

Criamos o banco de dados e a partir de agora podemos prosseguir com o nosso treinamento, criando outros componentes no banco de dados sucos.




2-7 Comando para criação de banco de dados

Qual é o comando utilizado para criação de banco de dados?

INSERT
  Alternativa Errada! Este comando até existe mas não para criação de banco de dados.

CREATE
  Alternativa Correta! Este é o comando principal para criação de um banco de dados.

NEW
  Alternativa Errada! Este comando não existe no MYSQL.





2-8 Criando um banco de dados usando assistente

Transcrição

Outra maneira de criar o banco de dados é usando um assistente, mas apenas se estiver utilizando o Workbench. Visto que, possui funcionalidades que nos auxiliam a realizar tarefas sem a necessidade de digitar o comando SQL.

No MySQL Workbench, em qualquer área do lado esquerdo em Schemas, selecione o botão direito e clique na opção "create schema". Será exibida uma caixa de diálogo com o campo "name", que vamos alterar para SUCOS2 e o "Charset/Collation", que na primeira caixa clicável escolheremos a opção utf8 e na seguinte uft8_general_ci. Essas informações estão relacionadas aos caracteres especiais, caso precise conter eles no seu banco de dados. Em seguida, selecione o botão "Aply" do lado inferior esquerdo do Workbench.

Será mostrado uma tela com o título Apply Changes to Object, informando que será criado o objeto e na próxima página é exibido o comando CREATE SCHEMAsucos2DEFAULT CHARACTER SET utf8;. Para fins de curiosidade, se pegarmos esse comando e colar na área do MySQL, será executado normalmente. Então, o que a caixa de diálogo exibida pelo Workbench faz é agilizar a escrita do comando SQL.

Perceba que o nome do nosso banco de dados sucos está entre crases, essa nomenclatura é mais usada em situações para limitar o nome que há espaços entre as palavras, por exemplo, sucos 2, no caso não vamos precisar já que não temos espaços no nome do nosso database, mas podemos manter.

Selecionando Apply novamente, executaremos o comando. Clique em "Finish" para fechar a janela de execução e visualizarmos apenas a área MySQL, observe que no MySQL do lado esquerdo em Schemas, já consta o banco de dados.

CREATE SCHEMA `sucos2` DEFAULT CHARACTER SET utf8;

Note também, que o comando exibido para criar o banco de dados em uma das telas anteriores não aparece mais, é apenas no momento de execução mesmo. Na parte superior da área de digitação do código, o programa vai abrindo abas conforme executamos os comandos, sendo a primeira aba a Query 1 que foi o comando manual e direto de criação e a segunda sucos2 - Schema é a caixa de diálogo para criar o banco de dados sucos2.

À medida que formos executando alguns comandos SQL, irei mostrar uns comandos visuais que auxiliam na memorização da sintaxe. Nessa parte mais visual é possível enxergar o comando que o Workbench está gerando, copiar, colar e adaptar, se necessário. 




2-9 Criando um banco de dados

Como podemos criar um banco de dados no Mysql Workbench?

Somente através de um assistente.
  Alternativa Errada! Esta não é a única maneira de criarmos banco de dados.

Através de comandos SQL e assistentes.
  Alternativa correta! Podemos criar um banco de dados destas duas maneiras.

Somente por comandos SQL.
  Alternativa Errada! Esta não é a única maneira de criarmos um banco de dados.




2-10 Apagando banco de dados

Transcrição

Você pode acessar a documentação MySQL usada para a explicação dessa aula neste link
https://dev.mysql.com/doc/refman/8.0/en/drop-database.html


Agora que já criamos, vamos aprender a apagar o banco de dados. Para tal, vamos usar o comando DROP DATABASE, basta digitar esse comando e o nome específico do banco a ser apagado. Na parte [IF EXISTS] db_name serve para evitar um erro de execução caso a database não exista.

Sintaxe completa:

DROP {DATABASE | SCHEMA} [IF EXISTS] db_name

Voltando para o MySQL Workbench, na área de consulta vamos digitar o comando DROP DATABASE SUCOS; para apagar o banco de dados sucos e rodamos. No espaço de "Output", temos a mensagem 0 rows(s) affected e em "Action Output" nos informa através de uma seta em verde que o comando foi executado com sucesso. Note que o banco de dados não consta mais na lista no lado esquerdo, onde é localizado os demais bancos. Agora, se formos nos arquivos do sistema operacional, no diretório Data do MySQL, perceba que também não há mais nenhum diretório com o nome sucos.

DROP DATABASE SUCOS;

Por ser um comando que excluí banco de dados e, consequentemente todos os dados contidos nele, é preciso tomar bastante cuidado para quem damos permissão de acesso para executar tal comando. Há até desenvolvedores e desenvolvedoras que não possuem essa permissão, conseguem apenas criar tabelas e inserir dados. O único que possui o privilégio de criar e apagar bancos de dados é o administrador, conhecido como DBA (sigla em inglês de Database administrator, Administrador de banco de dados).

É possível também excluir a database sem digitar o comando, apenas indo no lado esquerdo no Workbench, selecionar com o botão direito do mouse no nome que deseja apagar e escolher a opção "Drop Schema". Será exibido uma tela perguntando se realmente queremos excluir o banco de dados com duas opções "Review SQL", que irá nos mostrar o comando SQL que será executado e "Drop Now", que é a confirmação para a exclusão. Clicando em "Review SQL" perceba que será apresentado o comando DROP DATABASE `sucos2`;, selecionando "Execute" a database sucos2 foi excluído do Workbench e fisicamente no disco.

Até a próxima aula!




2-11 Exclusão de um banco de dados

Qual é o comando para apagar um banco de dados?

TRUNCATE
  Alternativa Errada! Este comando até existe. Mas não é para apagar banco de dados.

DROP
  Alternativa correta! Este é o comando utilizado para apagar um banco de dados.

DELETE
  Alternativa Errada! Este comando até existe, mas não é utilizado para apagar um banco de dados.




2-12 MYSQL por linha de comando

Transcrição

Vamos usar o Workbench ao longo do nosso treinamento por ser mais fácil de inserir comandos, criar e apagar tabelas e até visualizar o resultado na própria interface. Mas, tem os que não gostam e preferem usar o SQL como linha de comando. Com a finalidade de exemplificar, vamos acessar o MySQL sem precisar usar a IDE, isto é, por linha de comando.

    A IDE do MySQL Workbench é apenas uma interface gráfica para nos auxiliar na manipulação do banco de dados.

Quando instalamos as ferramentas do MySQL, o cliente e o servido, não necessariamente precisamos de uma IDE para trabalhar, basta ir direto em linha de comando. Para isso, vamos em "Windows" e no campo de busca digitamos "cmd" para encontrar o prompt de comando, selecionando essa opção será exibido uma tela preta.

Para conseguirmos usar a linha de comando, é preciso ir até o diretório onde está localizado o MySQL ou, como qualquer programa do Windows, ir ao painel de controle usando o atalho "Ctrl + P" na variável path e inserir o caminho da localização do executável do MySQL para poder acessar por linha de comando.

No cmd, vamos digitar o comando cd\, para voltarmos para a pasta C: e, em seguida, cd "Program Files", para entrar na pasta e depois “cd MySQL”. Para visualizar os diretórios na pasta MySQL digite dir, será exibido diversos diretórios, vamos optar pelo cd "MySQL Server 8.0" e, novamente, escrevemos o comando dir e, logo após, cd bin. Temos nesse diretório bin o programa dir mysql.exe, é com ele que vamos entrar no MySQL como linha de comando.

Caminho:

C: \program files>cd “mysql server 8.0>cd bin>dir mysql.exe

Prosseguindo, vamos inserir mysql -h localhost, sendo o "-h" servidor (host) e o "localhost" o meu próprio servidor. Antes de continuarmos, voltando para o Workbench e selecionando o ícone com a imagem de casa na parte superior esquerda da tela, vamos para a área de conexão. Na conexão local, perceba que ela é localhost, isto é, podemos acessar a nossa própria máquina apenas indo na máquina chamada localhost.

    Localhost é o nome da nossa própria máquina.

Voltando para o prompt de comando, acrescentamos -u ao nosso comando,root que é o nosso usuário e root -p, sendo -p a senha, mas não vamos digitar ainda. Esse comando informa que vamos nos conectar no servidor localhost, que vou usar o usuário root e que a senha será digitada a seguir.

mysql -h localhost -u root -p

Selecionando "Enter" aparece uma mensagem escrita "Enter password" para inserir a senha do usuário root, vamos digitar a senha e clicar em "Enter". Repare que estamos agora no MySQL, visto que o nosso caminho é substituído por mysql>.

Vamos realizar o comando create database sucos; e apertar o "Enter", será exibido a mensagem Query OK, 1 row affected (0.00 sec). Sem fechar o cmd, voltando para o Workbench e clicando na pasta no canto superior esquerdo ao lado do ícone da casa, "Local instance MySQL80" saímos da conexão local e retornamos para o ambiente do MySQL. Selecione com o botão direito na aba da árvore que constam os bancos de dados, escolhendo a opção "Refresh All", o banco de dados sucos aparece, visto que o criamos pela linha de comando.

No prompt, podemos digitar o comando select * from city;, nossa tabela de cidades. Mas, ao clicarmos no "Enter", teremos um erro como retorno,ERRO 1046 (3D000) No database selected, informando que nenhuma database foi selecionado. Isso acontece porque não selecionamos o banco de dados world, e para executar o comando é preciso escolher o banco de dados que quero usar. Para isso, vamos usar o comando use world, que corresponde ao duplo clique do Workbench.

    Os comando CREATE e DROP são comandos de sistema e, em razão disso, não preciso estar associado a um banco de dados.

Apertamos novamente "Enter" para rodar o nosso comando, será exibido uma mensagem dizendo que a database foi alterado (Database Changed) e, agora sim, podemos digitar o select * from city;. O programa vai listar todos o conteúdo da tabela city, que são 4.079 linhas em zero segundos, este tempo são os segundos que o banco de dados levou para efetuar a consulta. Para exibir as informações na tela é necessário um determinado tempo, mas por já estar em memória o resultado da consulta é mais rápido.

No Workbench, o nosso banco de dados world está selecionado e podemos digitar o comando select * from city; e executar, o resultado fica, visualmente, mais agradável que no MySQL por linha de comando.

Novamente no cmd, para sair da database basta digitar "EXIT" para fechar o programa, que voltamos para o prompt do Windowns. Veja que podemos escrever o comando com letras maiúsculas ou minúsculas, isto é, o MySQL não é case sensitive, ao contrário de alguns programas ligados, por exemplo, o Java.

Mas, à medida que formos aprendendo a construir comandos SQL, é uma boa prática indentar de forma correta os comandos, colocando-os em letras maiúsculas para dar destaque.




2-13 Consolidando o seu conhecimento


Chegou a hora de você seguir todos os passos realizados por mim durante esta aula. Caso já tenha feito, excelente. Se ainda não, é importante que você execute o que foi visto nos vídeos para poder continuar com a próxima aula.

1) Acesse o Workbench.

2) No canto esquerdo temos uma estrutura em forma de árvore onde vemos o banco de dados, ou esquemas.

1.png

3) Abrindo um dos banco de dados podemos ver alguns dos seus componentes.

2.png

4) No menu do Workbench, temos o botão "+ SQL" onde uma área de edição será criada para que possamos incluir os comandos de SQL para gerenciar nossos bancos de dados.

5) Efetue um duplo clique no banco de dados World. Depois, execute o seguinte comando na área de edição:

SELECT * FROM CITY;

6) Clique em:

3.png

E a consulta é executada.

4.png

7) Digite, abaixo, um novo comando:

SELECT * FROM COUNTRY;

8) Clique em:

5.png

E as duas consultas serão executadas.

9) Se você selecionar uma área com alguns comandos e clicar em:

6.png

Somente aquele comando selecionado é que será executado.

10) Caso o comando esteja errado, abaixo você verá o resultado de cada execução.

11) Vamos criar um banco de dados. Para isso, crie um novo script no Workbench e digite:

CREATE DATABASE SUCOS;

12) Execute o comando. Note que o banco de dados é criado.

7.png

13) Podemos criar o banco de dados através de um assistente. Para isso, clique com o botão da direita do mouse sobre uma área qualquer onde fica a lista dos bancos de dados.

8.png

E selecione Create Schema.

14) Inclua o nome do banco de dados (ex: Sucos2).

15) Clique em Apply.

16) O comando SQL é exibido. Clique novamente em Apply e o novo banco é criado.

17) Podemos apagar o banco de dados. Execute o comando:

DROP DATABASE SUCOS;

18) Note que o banco não mais aparece na lista de bancos de dados.

9.png

19) Se escolhermos a base sucos2, com o botão da direita do mouse, podemos também apagar o banco clicando em Drop Schema.

10.png

20) É possível acessar o MySQL por linha de comando. Vá para o subdiretório c:\Program Files\MySQL\MySQL Server 8.0\bin

21) Digite o comando:

mysql -h localhost -u root -p

Tecle enter e depois inclua a senha.

22) Digite o comando:

CREATE DATABASE sucos;

Se você for conferir no Workbench veja que o banco de dados sucos foi acrescido à lista de bancos disponíveis.

23) Para executar uma consulta no banco exemplo world digite:

USE world; <ENTER>
SELECT * FROM city; <ENTER>

Onde <ENTER> significa teclar a tecla Enter.

24) Verá que a lista de cidades são listadas.

25) Para sair digite:

exit

Opinião do instrutor

Continue com os seus estudos, e se houver dúvidas, não hesite em recorrer ao nosso fórum!





2-14 O que aprendemos?

  A acessar e navegar pelo Workbench;
  
  A criar um banco de dados por linha de SQL ou pelo assistente;
  
  Como apagar um banco de dados por linha de SQL ou pelo assistente;
  
  Como acessar uma tabela por linha de comando ou pelo assistente;

