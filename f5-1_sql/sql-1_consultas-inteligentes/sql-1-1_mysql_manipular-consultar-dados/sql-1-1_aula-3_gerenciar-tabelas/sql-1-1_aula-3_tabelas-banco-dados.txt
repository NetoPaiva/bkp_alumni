https://cursos.alura.com.br/course/mysql-manipule-dados-com-sql

Data Science > Cursos de SQL e Banco de Dados

Curso de
SQL com MySQL: manipule e consulte dados


Aula 3 | 50min

Gerenciando as tabelas do banco de dados


https://cursos.alura.com.br/course/mysql-manipule-dados-com-sql/section/8034/tasks

  3-1 Tipos de dados
  3-2 Tipo data
  3-3 Criando a primeira tabela
  3-4 Criando tabela de vendedores
  3-5 Criando a tabela pelo assistente
  3-6 Apagando tabelas
  3-7 Apagando a tabela de vendedores
  3-8 Consolidando o seu conhecimento
  3-9 O que aprendemos?



3-1 Tipos de dados


Transcrição

Sabemos que a entidade principal do banco de dados é a tabela, que possui colunas (campos) de diferentes categorias (tipos) e que, ao longo do mesmo campo, todos os valores devem ser do tipo estabelecido na criação da tabela.

Vamos entender agora quais são os principais tipos no caso do MySQL.
Tipo	Valor em Bytes	Menor Valor(Com Sinal) - Signed	Menor Valor (Sem Sinal) - Unsigned	Maior Valor (Com Sinal) - Signed	Maior Valor (Sem Sinal) - Unsigned
TINYINT	1	-128	0	127	255
SMALLINT	2	-32768	0	32767	65535
MEDIUMINT	3	-8388608	0	8388607	16777215
INT	4	-2147483648	0	2147483647	4294967295
BIGINT	8	-2xE63	0	2xE63	2xE64-1

    Propriedade UNSIGNED: Não permite sinal no número. Por isso, o conjunto de valores válidos aumentam.

Iniciando pelo tipo NUMÉRICOS, temos duas categorias: INTEIROS e DECIMAIS. Nos números inteiros há diversos tipos que podem ser criados no MySQL e estão diretamente relacionados com o espaço que vou precisar para armazenar determinado número no banco de dados. Quanto maior o espaço, maior o conjunto de números possíveis a serem armazenados.

Observando a tabela, na coluna "TIPO" temos cinco categorias de números inteiros que podem ser armazenados no MySQL, o TINYINT, SMALLINT, MEDIUMINT, INT E BIGINT. No segundo campo, Valor em Bytes temos o número de bytes gastos para armazenar um número de determinado tipo, como o TINYINT que para armazenar é necessário 1 byte, o SMALLINT que gasta 2 bytes e assim sucessivamente.

Quanto maior a quantidade de bytes que posso armazenar, maior o espaço de números com os quais posso trabalhar. Então, por exemplo, o TINYINT fica entre -128 e 127, se for criado um número dessa categoria e enviado para armazenar o número 300, será retornado um erro, visto que esse tipo não suporta.

Temos também uma propriedade chamada UNSIGNED. É um atributo para números inteiros no MySQL utilizado para a definição de números positivos (sem sinal), visto que o sinal de menos (-) ocupa espaço de armazenamento. Então, se informar para o MySQL que uma coluna específica é do tipo inteiro e sem sinal, o conjunto de números para armazenar nesse tipo de campo é maior, visto que não é preciso armazenar no computador os sinais e até mesmo de números positivos, já que não é reservado um espaço para arquivar o sinal.

Exemplificando, se o TINYINT for do tipo UNSIGNED, consigo guardar de 0 a 255 e se for com sinal do -128 a 127, perceba haver uma diferença de espaços com o ganho do sinal.

Falando um pouco sobre os números DECIMAIS, temos dois tipos: de PRECISÃO FIXA e PONTO FLUTUANTE. Este significa que será realizado um arredondamento quando o número de casas decimais for superior ao número permitido pelo banco de dados. No ponto flutuante também temos dois tipos de valores decimais, o FLOAT, que trabalha com uma precisão simples de 4 bytes e o DOUBLE, com precisão dupla de 8 bytes. A diferença entre ambos é o tamanho de espaço de armazenamento.

O DOUBLE é mais usado para quando queremos ter números mais exatos nos cálculos, uma vez que ele faz arredondamentos mais precisos com números com mais casas decimais. Quando declaramos um número FLOAT ou DOUBLE, é possível especificar o número de dÍgitos e casas decimais.

Como exemplo, quando declaramos esse tipo, podemos especificar da seguinte forma FLOAT (7,4) isso significa que esse número do tipo FLOAT vai ter sete dígitos, sendo quatro casas decimais. Podemos inserir um número de casas decimais para além de quatro, como no caso do número 999,00009 com cinco casas decimais. O MySQL, atendendo a especificação, vai arredondar esse número para quatro casas decimais, armazenando o 999,0001.

Nos DECIMAIS FIXOS, temos o DECIMAL ou NUMERIC, são análogos e sua definição é a quantidade máxima de dígitos que o número pode ter, no caso é 65 dígitos. Isso para números INTEIROS e DECIMAIS, ou seja, posso ter um número com um número inteiro e 64 casas decimais, ou posso ter um número com 64 números inteiros e apenas uma casa decimal.

Quando especificamos o número de casas decimais e a quantidade de dígitos, já estamos indicando o conjunto máximo e mínimo de dados. Vamos supor que temos DECIMAL(5,2), isto é, o número é decimal com 5 dígitos e 2 casas decimais, só poderá armazenar entre -999,99 e 999,99, tal como especificamos no tamanho. Não será feita nenhuma aproximação, apenas vai ser gravado o número exato digitado para ser guardado no banco de dados.

Outro tipo numérico é o BIT, que armazena valores de até 64 bytes. Explicando um pouco sobre o BIT, se o campo for do tipo BIT(1), é possível armazenar 1 ou 0. Se for BIT(2) é viável armazenar 01,10,00 e 11. Agora, se tiver um número de até 64 BITS, tenho o tamanho de 64 caracteres que podem ser gravado de 1 ou 0 que representa um número binário. Em campos do tipo LÓGICO, também é usado o BIT, sendo 1 (um) verdadeiro e 0 (zero) falso.

Os campos numéricos possuem alguns atributos. Já foi mencionado o SIGNED e UNSIGNED, que representam se haverá número negativo ou não, mas, agora vamos entender um pouco sobre o ZEROFILL, que preenche com zeros o que estiver faltando do número. Por exemplo, se tiver um campo do tipo INT(4) e pedir para solicitar o valor 5, será gravado 0005.

Outro atributo é o AUTO_INCREMENT. Esta propriedade é o próprio banco de dados que gera uma sequência numérica automaticamente. Se tiver uma tabela vazia com um campo desse tipo e for inserido um valor nessa coluna será atribuído o valor 1, se incluirmos mais um valor será gerado o valor 2 e assim por diante. Essa sequência se inicia no 1 ou no 0, definido no próprio AUTO_INCREMENT, bem como, o valor do incremento que quero aplicar, podendo ser 0, 5, 10, 15, 20 ao invés de 1, 2, 3, 4.

O OUT OF RANGE é um erro que acontece quando tentamos gravar na base de dados um valor que está fora do espaço permitido.

Vamos compreender um pouco agora sobre os campos de DATA e HORA, temos cinco principais:

O campo DATE armazena um dia, no formato ano, mês e dia com traços entre eles, vai dia 1000-01-01 até 9999-12-31. Já o DATETIME, guarda data e hora. A hora é importante principalmente quando tempos campos do tipo LOG, que possui o horário em que alguém fez alguma ação específica no sistema.

Seguindo, o TIMESTAMP é bem semelhante ao o DATETIME, contudo possui duas características principais: tem um range menor, que vai de 1970-01-01 a 2038-01-19 e possui fuso horário. Por isso o range fica menor, para armazenar mais informações.

Por mais que esse range de datas pareça pequeno, vale lembrar que utilizamos fuso horário para sistemas, por exemplo, de agendas para marcar reuniões em empresas que tiver funcionários(as) em diversos países. Por isso, o range até 2038 não é tão pequeno quanto parece, visto que ninguém irá marcar uma reunião de hoje até o ano de 2038.

O TIME armazena somente o horário e tem um range, de -838:59:59 a 839:59:59. Normalmente, usamos só para gravar uma hora no relógio que vai de meia-noite às onze e cinquenta e nove da noite do dia seguinte. Por isso, não é preciso ter 838 horas gravadas.

No campo YEAR é guardado somente o ano de 1901 a 2155. Podendo ser de duas ou quatro casas decimais, mas, normalmente utilizamos o DATE com uma data de primeiro de janeiro do ano que quero armazenar. Nesse treinamento ainda aprenderemos que existem funções do tipo data que conseguem extrair de um campo DATE, DATETIME ou TIMESTAMP o ano específico.

Falando um pouco do tipo STRING, são as cadeias de caracteres, os textos. Temos algumas categorias, começando pelo CHAR e o VARCHAR, ambos possuem o tamanho limite de 255 caracteres, a principal diferença são os espaços.

Caso tivermos um campo CHAR(4) e o utilizamos para armazenar as letras "aa", no banco de dados será guardado dois espaços vazios, já que no campo foi estabelecido o caractere de tamanho quatro, ficaria " aa". Isto é, esse campo ocupa maior espaço em disco, visto que grava os espaços vazios que, em algumas situações, pode ser desnecessário. Já quando nos referimos ao VARCHAR(4), se quisermos armazenar "aa", será guardado somente dois caracteres sem gastar espaço a mais no disco.

Temos também as STRINGS do tipo binário, o BINARY e o VARBINARY. Ambos possuem o mesmo conceito do CHAR e VARCHAR, um armazena os espaços e o outro não. O que os difere é que o armazenamento não é em caractere e sim em bytes, ou seja, o tamanho máximo é expresso em binário.

Outros campos do tipo STRING são o BLOB e o TEXT. No primeiro temos as variações de tamanho máximos TINYBLOB, BLOB, MEDIUMBLOB e LONGBLOB e no TEXT também, temos o TINYTEXT, TEXT, MEDIUMTEXT e LONGTEXT.

O BLOB é binário, então, em um LONGBLOB é possível guardar um grande binário no banco. Exemplo, posso gravar bytes de um arquivo no Word, ou os bytes de uma foto no banco de dados. Já o TEXT vai ser usado para armazenar textos.

Outro campo é o ENUM, é como se definíssemos opções. Por exemplo, se tivermos um campo chamado "SIZE" do tipo ENUM, na declaração é necessário inserir as opções que serão armazenadas nesse campo, no caso Size ENUM ('x-small', 'small', 'médium', 'large', 'x-large'), só conseguimos guardar no campo "SIZE" os textos nos parênteses.

Dois atributos importantes dos campos do tipo STRING são os SET e o COLLATE, estão relacionados com as cadeias de caracteres que serão usados para armazenar o texto. Caso queira guardar texto em alguma língua diferente é preciso selecionar na definição de campo o SET e o COLLATE especificando a língua utilizada, assim, será inserido no campo uma tabela ASCII maior ou menor dependendo do tipo que você está usando.

Finalmente, há alguns campos que aparecem mais nas versões atuais do MySQL, como o SPACIAL, para visualizar mapas. O tipo POINT grava o ponto usando a latitude e longitude no banco MYSQL que fornece algum determinado local, como, restaurante, supermercado ou ponto turístico. Outro tipo é o LINESTRING, que representa uma linha. O GEOMETRY e POLYGON, que representam áreas no mapa.

Temos outros tipos, mas mencionei esses para dar um apanhado geral das possibilidades que temos para criar tabelas e quais as opções para definir o tipo de coluna.




3-2 Tipo data

Digamos que eu tenha um sistema de dados de uma multinacional que controla chamados de suporte. Um chamado é aberto no Japão e resolvido pela equipe da Alemanha. Que tipo de campo data é o melhor para que possamos fazer cálculos corretos para obtermos o tempo de resposta dos chamados?

Date
  Alternativa Errada! O Date não guarda hora, minuto e segundo. Além disso, não leva em consideração o fuso horario.

Timestamp
  Alternativa correta! Temos que levar em conta o fuso horario da data para tratarmos de datas em diferentes partes do mundo.

Datetime
  Alternativa Errada! Usar esse campo sem levar em consideração o fuso pode levar a erros.




3-3 Criando a primeira tabela

Transcrição

Você pode fazer o download completo do código realizado neste vídeo e continuar seus estudos.
https://caelum-online-public.s3.amazonaws.com/1220-mysqlintroducaoaosql/03/SQL_02.sql


Agora que já sabemos os tipos, vamos criar a primeira tabela no banco de dados. Lembrando que estamos fazendo um projeto de banco de dados para uma empresa de suco de frutas.

Conversando com a empresa, nos foi passado que gostariam de armazenar no MySQL os cadastros dos clientes com as seguintes informações: o CPF do cliente, o nome completo, o endereço completo (rua, bairro, cidade, estado e CEP), a data de nascimento, a idade, o sexo, o limite de crédito para efetuar a compra dos produtos, o volume mínimo de sucos que o cliente pode comprar e se já foi realizado a primeira compra.

Analisando essas informações, percebemos que cada uma é uma coluna e será necessário definir o tipo de cada campo. Vamos, então, para o Workbench que já temos o banco de dados sucos, mas sem nenhuma tabela ainda.

Vamos criar a primeira tabela, então. Na parte superior esquerda da tela, clique no ícone de um papel escrito SQL com um sinal de (+) embaixo. Significa que estamos criando um script SQL e irá abrir uma nova área que digitaremos os comandos.

Para criarmos uma tabela, basta escrever CREATE TABLE, note que o Workbench nos dá algumas opções do que pode ser o comando que estamos inserindo. Seguindo o comando, é preciso inserir um nome para a tabela, que vai ser "tbcliente". Neste treinamento não vamos nos preocupar tanto com nomenclatura, mas há boas práticas de como criar nomenclatura para tabelas, campos, índices, chave primária e estrangeira, e assim por diante.

CREATE TABLE tbcliente;

Seguindo com a nossa tabela, além do nome é preciso estabelecer as colunas e seus respectivos tipos. Clicando em "Enter" e abrindo um parêntese para especificar os campos, vamos iniciar pelo CPF, o número que identifica o cliente, pode ser que tenha pontos, traços e às vezes inicia com zero. Por essa razão, por mais que o CPF sejam números, é melhor armazenar como texto. Visto que se gravar como número no momento de gravar, os zeros no início serão truncados. Exemplificando, se tivermos um CPF com o número 00388323102, o banco de dados guarda 3888323102. Por isso, vamos considerar o CPF com o tipo VARCHAR.

CREATE TABLE tbcliente
(CPF VARCHAR(11),

Após a vírgula vamos inserir os próximos campos. O "NOME" também será VARCHAR e, por ter nomes compridos, vamos estabelecer 100 caracteres para reservar o nome. Continuando, temos "ENDERECO" que também devemos considerar haver nomes de ruas grandes, inclusive, às vezes é viável criar dois campos para gravar o endereço. Vamos inserir da seguinte maneira ENDERECO1 VARCHAR(150),, ENDERECO2 VARCHAR(150),, e depois o bairro BAIRRO VARCHAR(50),, a cidade CIDADE VARCHAR(50),, lembrando sempre de inserir uma vírgula em cada linha.

O próximo campo pedido pela empresa é o "ESTADO", que também será do tipo VARCHAR ESTADO VARCHAR(50), em seguida o CEP VARCHAR(8),. Na idade, como dificilmente as pessoas vão ter mais de 150 anos, não é preciso colocar um INT, um SMALLINT já atende o que precisamos IDADE SMALLINT,, o sexo, que vai ser uma letra M (masculino) e F (feminino), ficando SEXO VARCHAR(1),.

No nosso campo de limite de crédito estamos nos referindo a valores em dinheiro, valores decimais, como, limite de crédito de R$ 1.627.438,32. Então, vamos colocar LIMITE_CREDITO FLOAT,, caso queira deixar com espaço entre a palavra limite e crédito, basta inserir crase no início e fim, assim limite credito.

Perceba que não especificamos o número de caracteres no FLOAT, mas poderíamos colocar FLOAT(10, 2),. Contudo, mesmo sabendo que dinheiro tem duas casas decimais, vamos representar o número sem fixar o número de casas decimais.

    Opinião do instrutor: quando estamos falando de banco de dados, estamos falando sobre armazenar informação. Quando exibo a informação é que posso mostrá-la do jeito como ela deve ser representada. Ou seja, na minha opinião, você não precisa se preocupar com o formato do valor, do número, ou do texto no momento de armazená-lo no banco de dados, mas sim no momento de exibir em um relatório, em um programa. E aí você tem, não somente no SQL, mas também nas linguagens de programação com as quais vai trabalhar em conjunto com o banco de dados, de exibir a informação do jeito como ela tem que aparecer. Isto é, posso gravar um número com dez casas decimais, mas no momento em que eu for exibir, forço a exibir só com duas casas.

Já o volume de compras é expresso em litros, então, também não vamos nos preocupar se tem ou não casas decimais: VOLUME_COMPRA FLOAT,. Finalmente, o último campo, se o cliente já realizou uma primeira compra ou não. Neste caso vamos usar o campo BIT de um espaço apenas, para eu poder ter o 1 (realizou a primeira compra) ou o 0 (ainda não realizou a primeira compra): PRIMEIRA_COMPRA BIT(1)), esse último parêntese fecha o que inseri no início da inclusão de todas as colunas.

Código completo:

CREATE TABLE tbcliente"
( CPF VARCHAR (11) ,
NOME VARCHAR (100) ,
ENDERECO1 VARCHAR (150) ,
ENDERECO2 VARCHAR (150) ,
BAIRRO VARCHAR (50) ,
CIDADE VARCHAR (50) ,
ESTADO VARCHAR (2) ,
CEP VARCHAR (8) ,
IDADE SMALLINT,
SEXO VARCHAR (1) ,
LIMITE_CREDITO FLOAT ,
VOLUME_COMPRA FLOAT ,
PRIMEIRA_COMPRA BIT (1)

Ficou assim, CREATE TABLE, logo depois o nome da tabela, abro parênteses, coloco todos os campos separados por vírgula, o nome do campo e o tipo, e fecho o parêntese. Vamos rodar agora, selecionando na parte superior à área que digitamos o comando, o ícone de raio. Na parte de "Action Output" é exibida uma mensagem informando que o comando foi executado com sucesso.

Na região de "Schemas", clicando em sucos com o botão direito do mouse e escolhendo a opção "Refresh All", note que a tabela "tbcliente" foi criada.

Fizemos o primeiro comando de SQL para criar uma tabela. Espero que tenham entendido e gostado, até a próxima aula!




3-4 Criando tabela de vendedores



Desafio: Nosso sistema de vendas tem mais uma tabela a ser criada: vendedores.

Algumas informações:

    Nome da tabela deve ser TABELA_DE_VENDEDORES
    Vendedor tem o número interno da matrícula, onde será armazenado no campo MATRICULA, que deve ser um string de 5 posições.
    O nome do vendedor deverá ser armazenado no campo NOME, e deve ser um string de 100 posições.
    Criar o campo PERCENTUAL_COMISSAO que representa quantos % de comissão o vendedor ganha sobre cada venda.

Crie esta tabela no banco de dados SUCOS.
Opinião do instrutor

CREATE TABLE TABELA_DE_VENDEDORES (
    MATRICULA varchar(5), 
    NOME varchar(100), 
    PERCENTUAL_COMISSAO float
);




3-5 Criando a tabela pelo assistente


Transcrição

Se a empresa suco de frutas possui uma tabela de clientes, consequentemente, precisa de uma tabela de produtos, afinal, os clientes devem comprar itens da empresa.

Nessa tabela teremos as informações dos sucos de frutas, tais como: "código do produto", é um código interno para identificar o produto; "nome do produto", descritor do produto; "embalagem", pode ser lata, litro ou em caixa; "tamanho" é o volume do suco, "sabor", visto que há várias marcas com o mesmo sabor e "preço de lista", é o preço tabelado do produto. Todos esses cinco campos serão VARCHAR, visto que o código pode ter letras e o preço de lista, será do tipo FLOAT.

Vamos criar essa tabela de produtos usando uma maneira mais visual, uma caixa de diálogo que o MySQL Workbench possui. Então, voltando para o Workbench, do lado esquerdo em sucos, clique em "Tables" com o botão direito do mouse e escolha a opção "create table". Será exibida uma nova aba "new_table - Table" com uma série de propriedades que é possível usar na criação da tabela.

Preenchendo essas propriedades, vamos em "Table name" e inserir o nome "tbProduto", não vamos incluir os parâmetros mais detalhados, como charset/collation ou onde tem as letras "PK", "NN", entre outras, isso vamos ver mais adiante, talvez em um curso mais avançado.

Para criar as colunas da tabela, selecione sob "Column name" e digite o nome e ao lado o "Datatype" (tipo do dado) do campo. Começando por código do produto, que vamos chamar somente de "PRODUTO" e o tipo VARCHAR(20), observe que "PK" e "NN" foram selecionados automaticamente, vamos desmarcar no momento por ser propriedades que não são necessarias ainda para configurar na tabela.

Passando para o próximo campo, selecione a seta para baixo do lado direito na caixa de diálogo e digite "NOME" que também será VARCHAR(150), para o campo seguinte, "EMBALAGEM" do tipo VARCHAR(150), "TAMANHO" que será VARCHAR(50), "SABOR" que é VARCHAR (50) e, por último, "PRECO_LISTA" que será FLOAT.

Inserido todos os campos, clicamos agora em "Apply" do lado inferior direito e será exibida uma mensagem informando sobre uma configuração padrão que o programa vai usar, selecione o botão "OK" para continuar.

Será mostrada uma nova tela com o comando com algumas alterações como o nome do banco, ponto e nome da tabela CREATE TABLE `sucos`.`tbproduto, o que não tem problema visto que quando rodamos o script para criar a tabela de clientes já haviamos selecionado a base sucos, por isso, ao inserir um campo ele estará se referindo a base sucos. Mas, podemos criar esse script sem a necessidade de entrar no banco de dados que é inserindo o nome do banco, ponto final e nome da tabela. Já as crases no nome da tabela e banco de dados é que, por ser um nome genérico o programa acaba inserindo para garantir caso haja espaço entre os nomes.

Percebe que ao final de cada campo está escrito "NULL", isso significa que esse campo aceita valores nulos ou vazios, como não especificamos na caixa de diálogo o programa acaba inserindo automaticamente.

Mas no momento vamos nos atentar somente aos comandos já vistos nesse curso. Então, criamos uma tabela (CREATE TABLE), inserimos o nome da tabela (sucos.tbproduto), os campos e suas respectivas categorias separados por vírgula. Clique no botão "Apply" do lado inferior direito e, logo após, "Finish".

Observando, no Workbench, do lado esquerdo a tabela "tbproduto" já foi incluída em sucos. Agora, temos no banco de dados duas tabelas, a de clientes e produtos.





3-6 Apagando tabelas

Transcrição

Podemos apagar as tabelas, mas antes, é necessário verificar alguns requisitos antes de excluir. No caso, temos duas tabelas que não se relacionam no banco de dados, mas se tivessem alguma relação entre elas, pode ter situações em que não é possível apagar.

Vamos apagar a tabela de duas formas, através do comando e de um assistente. Como iremos utilizar a tabela de clientes e produtos nas próximas aulas, não vamos excluir ela, iremos no script que criamos a tabela de clientes e inserir um sufixo "2" no final do nome da tabela e rodar o comando, realize o mesmo procedimento para o sufixo "3".

Código:

CREATE TABLE tbcliente2
( CPF VARCHAR (11) ,
NOME VARCHAR (100) ,
ENDERECO1 VARCHAR (150) ,
ENDERECO2 VARCHAR (150) ,
BAIRRO VARCHAR (50) ,
CIDADE VARCHAR (50) ,
ESTADO VARCHAR (2) ,
CEP VARCHAR (8) ,
IDADE SMALLINT,
SEXO VARCHAR (1) ,
LIMITE_CREDITO FLOAT ,
VOLUME_COMPRA FLOAT ,
PRIMEIRA_COMPRA BIT (1));

Clique com o botão direito do mouse em "TABLES" e escolha a opção "Refresh All" para aparecer as tabelas 2 e 3 de clientes.

Na primeira forma que temos para excluir uma tabela, no Workbench, selecione a "tbcliente2" com o botão direito do mouse e escolha a opção "Drop Table", será exibida uma mensagem perguntando se queremos revisar o comando "Review SQL" ou executar "Drop Now", selecione essa última opção e pronto, a tabela foi apagada.

A outra forma é por comando, selecione do lado superior esquerdo o ícone SQL com o + abaixo para criarmos uma pasta de comando e certifique-se que está no banco de dados sucos observando se está em negrito o nome ou usando o comando use Sucos;. Agora podemos apagar a tabela "tbcliente3" usando DROP TABLE tbCliente3; e rode o comando.

DROP TABLE tbcliente3;

Note que a tabela "tbcliente3" não consta mais em "TABLES" no banco de dados sucos. Recapitulando, é possível apagar uma tabela pelo Workbench usando o botão direito do mouse ou por comando "Drop Table" e o nome da tabela.





3-7 Apagando a tabela de vendedores

Apague a tabela TABELA_DE_VENDEDORES2 usando script SQL.

Para criar a tabela antes de apagá-la execute:

CREATE TABLE TABELA_DE_VENDEDORES2 (
        MATRICULA varchar(5),
        NOME varchar(100),
        PERCENTUAL_COMISSAO float
);

Opinião do instrutor

Após criar a tabela conforme o enunciado, apague-a utilizando o comando:

DROP TABLE TABELA_DE_VENDEDORES2;



3-8 Consolidando o seu conhecimento

Chegou a hora de você seguir todos os passos realizados por mim durante esta aula. Caso já tenha feito, excelente. Se ainda não, é importante que você execute o que foi visto nos vídeos para poder continuar com a próxima aula.

1) Acesse MySQL Workbench.

2) Crie a tabela de cliente digitando o comando abaixo:

CREATE TABLE tbcliente
( CPF VARCHAR (11) ,
NOME VARCHAR (100) ,
ENDERECO1 VARCHAR (150) ,
ENDERECO2 VARCHAR (150) ,
BAIRRO VARCHAR (50) ,
CIDADE VARCHAR (50) ,
ESTADO VARCHAR (2) ,
CEP VARCHAR (8) ,
IDADE SMALLINT,
SEXO VARCHAR (1) ,
LIMITE_CREDITO FLOAT ,
VOLUME_COMPRA FLOAT ,
PRIMEIRA_COMPRA BIT )

3) Execute o comando e depois atualize a árvore do Workbench para observar a nova tabela criada.

4) Podemos criar tabela pelo assistente. Botão da direita do mouse sobre Tables, abaixo do banco de dados Sucos, e escolha Create Table.

1.png

5) Digite o nome da tabela como tbProduto.

6) Inclua os campos conforme mostrado abaixo:

PRODUTO VARCHAR(20)
NOME VARCHAR(150)
EMBALAGEM VARCHAR(50)
TAMANHO VARCHAR(50)
SABOR VARCHAR(50)
PRECO_LISTA FLOAT

7) Clique no botão Apply.

8) Verifique o comando a ser executado. Clique em Apply novamente e a tabela é criada.

9) A tabela pode ser apagada. Para isso digite o comando para criar novas tabelas:

CREATE TABLE tbcliente2
( CPF VARCHAR (11) ,
NOME VARCHAR (100) ,
ENDERECO1 VARCHAR (150) ,
ENDERECO2 VARCHAR (150) ,
BAIRRO VARCHAR (50) ,
CIDADE VARCHAR (50) ,
ESTADO VARCHAR (2) ,
CEP VARCHAR (8) ,
IDADE SMALLINT,
SEXO VARCHAR (1) ,
LIMITE_CREDITO FLOAT ,
VOLUME_COMPRA FLOAT ,
PRIMEIRA_COMPRA BIT );

CREATE TABLE tbcliente3
( CPF VARCHAR (11) ,
NOME VARCHAR (100) ,
ENDERECO1 VARCHAR (150) ,
ENDERECO2 VARCHAR (150) ,
BAIRRO VARCHAR (50) ,
CIDADE VARCHAR (50) ,
ESTADO VARCHAR (2) ,
CEP VARCHAR (8) ,
IDADE SMALLINT,
SEXO VARCHAR (1) ,
LIMITE_CREDITO FLOAT ,
VOLUME_COMPRA FLOAT ,
PRIMEIRA_COMPRA BIT );

10) Foram criadas duas tabelas. Agora vamos apaga-las. A primeira por comando:

DROP TABLE TB_CLIENTES3;

11) Pelo assistente basta com o botão da direita do mouse sobre o nome da tabela TB_CLIENTES2:

2.png
Opinião do instrutor

Continue com os seus estudos, e se houver dúvidas, não hesite em recorrer ao nosso fórum!





3-9 O que aprendemos?

  Os tipos de dados que compõem uma tabela;

  Como criar uma tabela, tanto por script como por assistente;

  Como apagar uma tabela.
